{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"blog/","text":".md-sidebar--secondary:not([hidden]) { visibility: hidden; } Blog \u00b6 The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"blog/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading","title":"The past, present and future"},{"location":"blog/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading","title":"Excluding content from search"},{"location":"blog/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Search: better, faster, smaller"},{"location":"blog/2021/excluding-content-from-search/","text":"Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that . Prior art \u00b6 MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation. What's new? \u00b6 The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it. Excluding pages \u00b6 An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] } Conclusion \u00b6 The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that .","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#prior-art","text":"MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation.","title":"Prior art"},{"location":"blog/2021/excluding-content-from-search/#whats-new","text":"The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.","title":"What's new?"},{"location":"blog/2021/excluding-content-from-search/#excluding-pages","text":"An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ...","title":"Excluding pages"},{"location":"blog/2021/excluding-content-from-search/#excluding-sections","text":"If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"blog/2021/excluding-content-from-search/#excluding-blocks","text":"If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] }","title":"Excluding blocks"},{"location":"blog/2021/excluding-content-from-search/#conclusion","text":"The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Conclusion"},{"location":"blog/2021/search-better-faster-smaller/","text":"Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that . Architecture \u00b6 Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER Search index \u00b6 The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews. Search worker \u00b6 The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index. Search previews \u00b6 Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block. What's new? \u00b6 After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects. Rich search previews \u00b6 As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization . Tokenizer lookahead \u00b6 The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4 Case changes \u00b6 Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5 Version numbers \u00b6 Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes. HTML/XML tags \u00b6 If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section. Accurate highlighting \u00b6 Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter . Benchmarks \u00b6 We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once. User interface \u00b6 Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly. What's next? \u00b6 Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. 9 Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9 We've disabled comments due to Disqus' ads being so incredibly horrible and invasive. If you know a better alternative, please ping me at martin.donath@squidfunk.com . \u21a9","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that .","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#architecture","text":"Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER","title":"Architecture"},{"location":"blog/2021/search-better-faster-smaller/#search-index","text":"The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.","title":"Search index"},{"location":"blog/2021/search-better-faster-smaller/#search-worker","text":"The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index.","title":"Search worker"},{"location":"blog/2021/search-better-faster-smaller/#search-previews","text":"Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block.","title":"Search previews"},{"location":"blog/2021/search-better-faster-smaller/#whats-new","text":"After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects.","title":"What's new?"},{"location":"blog/2021/search-better-faster-smaller/#rich-search-previews","text":"As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization .","title":"Rich search previews"},{"location":"blog/2021/search-better-faster-smaller/#tokenizer-lookahead","text":"The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4","title":"Tokenizer lookahead"},{"location":"blog/2021/search-better-faster-smaller/#case-changes","text":"Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5","title":"Case changes"},{"location":"blog/2021/search-better-faster-smaller/#version-numbers","text":"Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes.","title":"Version numbers"},{"location":"blog/2021/search-better-faster-smaller/#htmlxml-tags","text":"If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.","title":"HTML/XML tags"},{"location":"blog/2021/search-better-faster-smaller/#accurate-highlighting","text":"Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter .","title":"Accurate highlighting"},{"location":"blog/2021/search-better-faster-smaller/#benchmarks","text":"We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.","title":"Benchmarks"},{"location":"blog/2021/search-better-faster-smaller/#user-interface","text":"Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.","title":"User interface"},{"location":"blog/2021/search-better-faster-smaller/#whats-next","text":"Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. 9 Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9 We've disabled comments due to Disqus' ads being so incredibly horrible and invasive. If you know a better alternative, please ping me at martin.donath@squidfunk.com . \u21a9","title":"What's next?"},{"location":"blog/2021/the-past-present-and-future/","text":"The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project. A little history \u00b6 In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021. 2021 in numbers \u00b6 2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world. Features \u00b6 It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times. Funding \u00b6 In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide. 2022 \u00b6 Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#a-little-history","text":"In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021.","title":"A little history"},{"location":"blog/2021/the-past-present-and-future/#2021-in-numbers","text":"2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world.","title":"2021 in numbers"},{"location":"blog/2021/the-past-present-and-future/#features","text":"It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times.","title":"Features"},{"location":"blog/2021/the-past-present-and-future/#funding","text":"In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide.","title":"Funding"},{"location":"blog/2021/the-past-present-and-future/#2022","text":"Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"2022"},{"location":"download/","text":".md-sidebar--secondary:not([hidden]) { visibility: hidden; } Release \u00b6 RISC-V Studio Toolchain Comming soon Comming soon","title":"Release"},{"location":"download/#release","text":"RISC-V Studio Toolchain Comming soon Comming soon","title":"Release"},{"location":"download/2021/excluding-content-from-search/","text":"Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that . Prior art \u00b6 MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation. What's new? \u00b6 The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it. Excluding pages \u00b6 An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] } Conclusion \u00b6 The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Excluding content from search"},{"location":"download/2021/excluding-content-from-search/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that .","title":"Excluding content from search"},{"location":"download/2021/excluding-content-from-search/#prior-art","text":"MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation.","title":"Prior art"},{"location":"download/2021/excluding-content-from-search/#whats-new","text":"The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.","title":"What's new?"},{"location":"download/2021/excluding-content-from-search/#excluding-pages","text":"An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ...","title":"Excluding pages"},{"location":"download/2021/excluding-content-from-search/#excluding-sections","text":"If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"download/2021/excluding-content-from-search/#excluding-blocks","text":"If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] }","title":"Excluding blocks"},{"location":"download/2021/excluding-content-from-search/#conclusion","text":"The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Conclusion"},{"location":"download/2021/search-better-faster-smaller/","text":"Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that . Architecture \u00b6 Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER Search index \u00b6 The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews. Search worker \u00b6 The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index. Search previews \u00b6 Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block. What's new? \u00b6 After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects. Rich search previews \u00b6 As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization . Tokenizer lookahead \u00b6 The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4 Case changes \u00b6 Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5 Version numbers \u00b6 Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes. HTML/XML tags \u00b6 If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section. Accurate highlighting \u00b6 Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter . Benchmarks \u00b6 We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once. User interface \u00b6 Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly. What's next? \u00b6 Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. 9 Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9 We've disabled comments due to Disqus' ads being so incredibly horrible and invasive. If you know a better alternative, please ping me at martin.donath@squidfunk.com . \u21a9","title":"Search: better, faster, smaller"},{"location":"download/2021/search-better-faster-smaller/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that .","title":"Search: better, faster, smaller"},{"location":"download/2021/search-better-faster-smaller/#architecture","text":"Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER","title":"Architecture"},{"location":"download/2021/search-better-faster-smaller/#search-index","text":"The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.","title":"Search index"},{"location":"download/2021/search-better-faster-smaller/#search-worker","text":"The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index.","title":"Search worker"},{"location":"download/2021/search-better-faster-smaller/#search-previews","text":"Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block.","title":"Search previews"},{"location":"download/2021/search-better-faster-smaller/#whats-new","text":"After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects.","title":"What's new?"},{"location":"download/2021/search-better-faster-smaller/#rich-search-previews","text":"As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization .","title":"Rich search previews"},{"location":"download/2021/search-better-faster-smaller/#tokenizer-lookahead","text":"The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4","title":"Tokenizer lookahead"},{"location":"download/2021/search-better-faster-smaller/#case-changes","text":"Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5","title":"Case changes"},{"location":"download/2021/search-better-faster-smaller/#version-numbers","text":"Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes.","title":"Version numbers"},{"location":"download/2021/search-better-faster-smaller/#htmlxml-tags","text":"If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.","title":"HTML/XML tags"},{"location":"download/2021/search-better-faster-smaller/#accurate-highlighting","text":"Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter .","title":"Accurate highlighting"},{"location":"download/2021/search-better-faster-smaller/#benchmarks","text":"We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.","title":"Benchmarks"},{"location":"download/2021/search-better-faster-smaller/#user-interface","text":"Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.","title":"User interface"},{"location":"download/2021/search-better-faster-smaller/#whats-next","text":"Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. 9 Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9 We've disabled comments due to Disqus' ads being so incredibly horrible and invasive. If you know a better alternative, please ping me at martin.donath@squidfunk.com . \u21a9","title":"What's next?"},{"location":"download/2021/the-past-present-and-future/","text":"The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project. A little history \u00b6 In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021. 2021 in numbers \u00b6 2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world. Features \u00b6 It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times. Funding \u00b6 In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide. 2022 \u00b6 Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"The past, present and future"},{"location":"download/2021/the-past-present-and-future/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.","title":"The past, present and future"},{"location":"download/2021/the-past-present-and-future/#a-little-history","text":"In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021.","title":"A little history"},{"location":"download/2021/the-past-present-and-future/#2021-in-numbers","text":"2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world.","title":"2021 in numbers"},{"location":"download/2021/the-past-present-and-future/#features","text":"It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times.","title":"Features"},{"location":"download/2021/the-past-present-and-future/#funding","text":"In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide.","title":"Funding"},{"location":"download/2021/the-past-present-and-future/#2022","text":"Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"2022"},{"location":"manual/06-MIPS-IDE-Projects/","text":"This chapter contains a description of projects in RISC-V Studio\u2122 IDE. A project is a logical construct that facilitates building a collection of C and/or assembly files into an executable image. Creating Projects \u00b6 Creating Source Files \u00b6 Creating new source files for a library project is straightforward; simply follow the file creation instructions found in Chapter 7. The examples that follow in this chapter are focused on importing existing files, which is typically the more common operation. Importing Source Files \u00b6 Building the Executable \u00b6 Creating an RISC-V Embedded Linux Project \u00b6 Creating an RISC-V Embedded Linux project is very similar to creating a standalone project \u2013 the biggest difference is the project type selection in the creation process. RISC-V Embedded Linux projects come with source files from the respective RTOS to enable successful generation of an executable utilizing the API from said RTOS. Below is the new project wizard dialog, which has selections for both types of projects. You can see that RISC-V Embedded Linux, and Standalone Embedded are two project types supported by RISC-V Studio\u2122 IDE in Figure 40. Figure 40 - RISC-V Project Types Supported by RISC-V Studio\u2122 IDE Note the Debug and Release options in the dialog. These options allow RISC-V Studio\u2122 IDE to manage two different configurations of the same project. The Debug configuration typically contains settings appropriate for developing and debugging the code in the project, while the Release configuration typically has settings appropriate for finished production code\u2014the main difference being the lack of debug symbols and perhaps higher optimization settings in the Release configuration. The examples in this guide use the Debug configuration. Creating Source Files \u00b6 Creating new source files for an executable project is straightforward; simply follow the file creation instructions found in Chapter 7. The examples that follow in this chapter are focused on importing existing files, which is typically the more common operation. Importing Source Files \u00b6 Importing files into newly created project is straightforward; simply drag and drop the desired files into the project. Files may also be imported to the project through menu selections. To explicitly import one or more files, \u201cright-click\u201d on the project as shown below and select the Import menu selection as shown in Figure 41. Figure 41 - Import Menu Selection Once Import is selected, RISC-V Studio\u2122 IDE displays the Import dialog, showing many options for the source of the files to import. Generally, the \u201cFile System\u201d option is the most used source for importing. Select this option to import one or more files from the file system into your project. The File System Import dialog is now displayed. Next, expand the \u201cGeneral\u201d folder, select \u201cFile System,\u201d and select the \u201cNext\u201d button. Simply use the Browse button to navigate to the specific folder containing the source files to import, select the files to import within that directory, and select \u201cFinish.\u201d You will now observe the selected files being imported into the selected project. At this point, all the necessary files for building an RISC-V Embedded Linux executable for RISC-V MCUs are contained in the project. Note that additional files might be required for executable projects and are specified in the linker settings dialogs. Such files include linker control files and the desired library files to be linked with the executable project. Building the Executable \u00b6 To build the executable, first ensure that the Console tab is selected. This makes it possible to view the progress of the executable build since the actual RISC-V C compiler invocation for each source file and the linker invocation is displayed in the Console view. Next, simply select the Build button to build the executable. Note that the default project settings are for a specific combination of RISC-V MCU device architecture, device, and hardware debug tools. To select a different combination, please refer to the subsequent section in this chapter called Modifying Projects. Once selected, observe compilation and linkage commands in the Console. At this point, the RISC-V Embedded Linux executable is ready for program, execution, and debug. Chapter 7 of this guide contains details of the program and debug processes. Closing Projects \u00b6 If a specific project is not currently needed, it is easily closed by right-clicking on the desired project to close and then clicking on the \u201cClose Project\u201d selection, as shown below in Figure 42: Figure 42 - Closing Project Menu Selection Below is the C/C++ perspective with the project in a closed state. Figure 43 - C/C++ Perspective in Closed State Modifying Projects \u00b6 There are many build options available for RISC-V Studio\u2122 IDE for RISC-V MCUs developers. The options are available through the Properties dialog. To bring up the Properties dialog, right click on the project name and then select \u201cProperties,\u201d as shown below in Figure 44. Figure 44 - Project Properties Selection Selecting \u201cProperties\u201d results in RISC-V Studio\u2122 IDE bringing up the Properties dialog. This dialog has many configuration options, however, the most typically used options are found within the \u201cC/C++ Build -Settings\u201d selection, shown here in Figure 45. Figure 45 - C/C++ Build / Settings Selection Device and Tool Settings \u00b6 N/A. RISC-V C Compiler Settings \u00b6 The high-level overview of the current C Compiler settings is shown below in Figure 47. Figure 47 - C Compiler High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the compiler is going to be invoked for this project. All files with a \u201c.c\u201d extension will be built, by default, with these options. General Settings \u00b6 The General settings dialog contains options enabling you to control various aspect of code and debug symbol generation by the compiler. You can also define additional pre-processor symbols, as well as include directory search path. An overview of the general setting dialog is shown below in Figure 48. Figure 48 - C Compiler General Settings Errors and Warning Settings \u00b6 This dialog allows you to control various error and warning reporting aspect of the compiler, as shown below in Figure 49. Figure 49 - C Compiler Errors and Warnings Settings Optimization Settings \u00b6 The optimization settings dialog allows you to change the optimization level of code generated by the compiler. Note that you will need to upgrade to a paid version of the compiler in order to access the full optimization settings of the compiler. RISC-V Linker Settings \u00b6 The high-level overview of the current C Linker settings is shown below in Figure 50. Figure 50 - Linker High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the linker is going to be invoked for this project. All executables, by default, will be linked with these options. General Options \u00b6 The General Options allows you to control the heap and stack size, as well as to write in additional options not covered by the dialog. A view of the General Option dialog is shown below in Figure 51. Figure 51 - Linker General Options Symbols and Macros \u00b6 This option group lets you introduce additional linker symbols, as well as pre-processor macro definition used during the linking process, as shown in Figure 52. Figure 52 - Symbols and Macros Settings Libraries Options \u00b6 These options, shown in Figure 53, let you specify one or more standard libraries to link with the project executable. In the event that one or more libraries are not part of the RISC-V toolchain (i.e. they reside in a different directory), you can also specify one or more search paths for the libraries. Other options include the ability to exclude standard libraries, start-up code, or floating point library. Note that the selections in the Libraries dialog specify the \u201cc\u201d and \u201cgcc\u201d libraries. It is the GNU linker than then prepends the \u201clib\u201d modifier to the library names specified and thus expects to find \u201clibc.a\u201d and \u201clibgcc.a\u201d library files in one of the specified library paths. RISC-V Studio\u2122 IDE also makes it possible to specify the path and actual name of library files. The \u201cAdditional Inputs (*.o/*.lib)\u201d dialog is used to do this. Please note that references to actual path on your host computer will make your project/workspace not portable to other host systems. Figure 53 - Library Options Diagnostic Options \u00b6 These options, shown in Figure 54, let you generate extra reports about the executable, including memory usages, files crossed referenced, and one or more trace symbol(s). Figure 54 - Diagnostic Options RISC-V Assembler Settings \u00b6 These settings let you control various aspects of the assembler. A general view is shown below in Figure 55. Figure 55 - Assembler General View As with compiler and linker settings, the \u201cCommand\u201d and \u201cAll Options\u201d show exactly how the assembler is to be invoked for files ending with \u201c.s\u201d extension in the selected project. General Settings \u00b6 The General settings let you define preprocessor macros, as well as assembler symbols and search paths, as shown below in Figure 56. Figure 56 - Assembler General Settings Other Options \u00b6 The Other options let you tune various parameters of the assembler, as shown in Figure 57. Figure 57 - Assembler Other Options Deleting Projects \u00b6 Deleting a project is done by right clicking on the project and selecting \u201cDelete\u201d Once \u201cDelete\u201d is selected, RISC-V Studio\u2122 IDE presents a dialog that specifies whether or not everything in the project directory is to be deleted. If the contents are not deleted, they may be used in a subsequent creation of another project.","title":"06 MIPS IDE Projects"},{"location":"manual/06-MIPS-IDE-Projects/#creating-projects","text":"","title":"Creating Projects"},{"location":"manual/06-MIPS-IDE-Projects/#creating-source-files","text":"Creating new source files for a library project is straightforward; simply follow the file creation instructions found in Chapter 7. The examples that follow in this chapter are focused on importing existing files, which is typically the more common operation.","title":"Creating Source Files"},{"location":"manual/06-MIPS-IDE-Projects/#importing-source-files","text":"","title":"Importing Source Files"},{"location":"manual/06-MIPS-IDE-Projects/#building-the-executable","text":"","title":"Building the Executable"},{"location":"manual/06-MIPS-IDE-Projects/#creating-an-risc-v-embedded-linux-project","text":"Creating an RISC-V Embedded Linux project is very similar to creating a standalone project \u2013 the biggest difference is the project type selection in the creation process. RISC-V Embedded Linux projects come with source files from the respective RTOS to enable successful generation of an executable utilizing the API from said RTOS. Below is the new project wizard dialog, which has selections for both types of projects. You can see that RISC-V Embedded Linux, and Standalone Embedded are two project types supported by RISC-V Studio\u2122 IDE in Figure 40. Figure 40 - RISC-V Project Types Supported by RISC-V Studio\u2122 IDE Note the Debug and Release options in the dialog. These options allow RISC-V Studio\u2122 IDE to manage two different configurations of the same project. The Debug configuration typically contains settings appropriate for developing and debugging the code in the project, while the Release configuration typically has settings appropriate for finished production code\u2014the main difference being the lack of debug symbols and perhaps higher optimization settings in the Release configuration. The examples in this guide use the Debug configuration.","title":"Creating an RISC-V Embedded Linux Project"},{"location":"manual/06-MIPS-IDE-Projects/#creating-source-files_1","text":"Creating new source files for an executable project is straightforward; simply follow the file creation instructions found in Chapter 7. The examples that follow in this chapter are focused on importing existing files, which is typically the more common operation.","title":"Creating Source Files"},{"location":"manual/06-MIPS-IDE-Projects/#importing-source-files_1","text":"Importing files into newly created project is straightforward; simply drag and drop the desired files into the project. Files may also be imported to the project through menu selections. To explicitly import one or more files, \u201cright-click\u201d on the project as shown below and select the Import menu selection as shown in Figure 41. Figure 41 - Import Menu Selection Once Import is selected, RISC-V Studio\u2122 IDE displays the Import dialog, showing many options for the source of the files to import. Generally, the \u201cFile System\u201d option is the most used source for importing. Select this option to import one or more files from the file system into your project. The File System Import dialog is now displayed. Next, expand the \u201cGeneral\u201d folder, select \u201cFile System,\u201d and select the \u201cNext\u201d button. Simply use the Browse button to navigate to the specific folder containing the source files to import, select the files to import within that directory, and select \u201cFinish.\u201d You will now observe the selected files being imported into the selected project. At this point, all the necessary files for building an RISC-V Embedded Linux executable for RISC-V MCUs are contained in the project. Note that additional files might be required for executable projects and are specified in the linker settings dialogs. Such files include linker control files and the desired library files to be linked with the executable project.","title":"Importing Source Files"},{"location":"manual/06-MIPS-IDE-Projects/#building-the-executable_1","text":"To build the executable, first ensure that the Console tab is selected. This makes it possible to view the progress of the executable build since the actual RISC-V C compiler invocation for each source file and the linker invocation is displayed in the Console view. Next, simply select the Build button to build the executable. Note that the default project settings are for a specific combination of RISC-V MCU device architecture, device, and hardware debug tools. To select a different combination, please refer to the subsequent section in this chapter called Modifying Projects. Once selected, observe compilation and linkage commands in the Console. At this point, the RISC-V Embedded Linux executable is ready for program, execution, and debug. Chapter 7 of this guide contains details of the program and debug processes.","title":"Building the Executable"},{"location":"manual/06-MIPS-IDE-Projects/#closing-projects","text":"If a specific project is not currently needed, it is easily closed by right-clicking on the desired project to close and then clicking on the \u201cClose Project\u201d selection, as shown below in Figure 42: Figure 42 - Closing Project Menu Selection Below is the C/C++ perspective with the project in a closed state. Figure 43 - C/C++ Perspective in Closed State","title":"Closing Projects"},{"location":"manual/06-MIPS-IDE-Projects/#modifying-projects","text":"There are many build options available for RISC-V Studio\u2122 IDE for RISC-V MCUs developers. The options are available through the Properties dialog. To bring up the Properties dialog, right click on the project name and then select \u201cProperties,\u201d as shown below in Figure 44. Figure 44 - Project Properties Selection Selecting \u201cProperties\u201d results in RISC-V Studio\u2122 IDE bringing up the Properties dialog. This dialog has many configuration options, however, the most typically used options are found within the \u201cC/C++ Build -Settings\u201d selection, shown here in Figure 45. Figure 45 - C/C++ Build / Settings Selection","title":"Modifying Projects"},{"location":"manual/06-MIPS-IDE-Projects/#device-and-tool-settings","text":"N/A.","title":"Device and Tool Settings"},{"location":"manual/06-MIPS-IDE-Projects/#risc-v-c-compiler-settings","text":"The high-level overview of the current C Compiler settings is shown below in Figure 47. Figure 47 - C Compiler High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the compiler is going to be invoked for this project. All files with a \u201c.c\u201d extension will be built, by default, with these options.","title":"RISC-V C Compiler Settings"},{"location":"manual/06-MIPS-IDE-Projects/#general-settings","text":"The General settings dialog contains options enabling you to control various aspect of code and debug symbol generation by the compiler. You can also define additional pre-processor symbols, as well as include directory search path. An overview of the general setting dialog is shown below in Figure 48. Figure 48 - C Compiler General Settings","title":"General Settings"},{"location":"manual/06-MIPS-IDE-Projects/#errors-and-warning-settings","text":"This dialog allows you to control various error and warning reporting aspect of the compiler, as shown below in Figure 49. Figure 49 - C Compiler Errors and Warnings Settings","title":"Errors and Warning Settings"},{"location":"manual/06-MIPS-IDE-Projects/#optimization-settings","text":"The optimization settings dialog allows you to change the optimization level of code generated by the compiler. Note that you will need to upgrade to a paid version of the compiler in order to access the full optimization settings of the compiler.","title":"Optimization Settings"},{"location":"manual/06-MIPS-IDE-Projects/#risc-v-linker-settings","text":"The high-level overview of the current C Linker settings is shown below in Figure 50. Figure 50 - Linker High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the linker is going to be invoked for this project. All executables, by default, will be linked with these options.","title":"RISC-V Linker Settings"},{"location":"manual/06-MIPS-IDE-Projects/#general-options","text":"The General Options allows you to control the heap and stack size, as well as to write in additional options not covered by the dialog. A view of the General Option dialog is shown below in Figure 51. Figure 51 - Linker General Options","title":"General Options"},{"location":"manual/06-MIPS-IDE-Projects/#symbols-and-macros","text":"This option group lets you introduce additional linker symbols, as well as pre-processor macro definition used during the linking process, as shown in Figure 52. Figure 52 - Symbols and Macros Settings","title":"Symbols and Macros"},{"location":"manual/06-MIPS-IDE-Projects/#libraries-options","text":"These options, shown in Figure 53, let you specify one or more standard libraries to link with the project executable. In the event that one or more libraries are not part of the RISC-V toolchain (i.e. they reside in a different directory), you can also specify one or more search paths for the libraries. Other options include the ability to exclude standard libraries, start-up code, or floating point library. Note that the selections in the Libraries dialog specify the \u201cc\u201d and \u201cgcc\u201d libraries. It is the GNU linker than then prepends the \u201clib\u201d modifier to the library names specified and thus expects to find \u201clibc.a\u201d and \u201clibgcc.a\u201d library files in one of the specified library paths. RISC-V Studio\u2122 IDE also makes it possible to specify the path and actual name of library files. The \u201cAdditional Inputs (*.o/*.lib)\u201d dialog is used to do this. Please note that references to actual path on your host computer will make your project/workspace not portable to other host systems. Figure 53 - Library Options","title":"Libraries Options"},{"location":"manual/06-MIPS-IDE-Projects/#diagnostic-options","text":"These options, shown in Figure 54, let you generate extra reports about the executable, including memory usages, files crossed referenced, and one or more trace symbol(s). Figure 54 - Diagnostic Options","title":"Diagnostic Options"},{"location":"manual/06-MIPS-IDE-Projects/#risc-v-assembler-settings","text":"These settings let you control various aspects of the assembler. A general view is shown below in Figure 55. Figure 55 - Assembler General View As with compiler and linker settings, the \u201cCommand\u201d and \u201cAll Options\u201d show exactly how the assembler is to be invoked for files ending with \u201c.s\u201d extension in the selected project.","title":"RISC-V Assembler Settings"},{"location":"manual/06-MIPS-IDE-Projects/#general-settings_1","text":"The General settings let you define preprocessor macros, as well as assembler symbols and search paths, as shown below in Figure 56. Figure 56 - Assembler General Settings","title":"General Settings"},{"location":"manual/06-MIPS-IDE-Projects/#other-options","text":"The Other options let you tune various parameters of the assembler, as shown in Figure 57. Figure 57 - Assembler Other Options","title":"Other Options"},{"location":"manual/06-MIPS-IDE-Projects/#deleting-projects","text":"Deleting a project is done by right clicking on the project and selecting \u201cDelete\u201d Once \u201cDelete\u201d is selected, RISC-V Studio\u2122 IDE presents a dialog that specifies whether or not everything in the project directory is to be deleted. If the contents are not deleted, they may be used in a subsequent creation of another project.","title":"Deleting Projects"},{"location":"manual/About-This-Guide/","text":"About The User Guide \u00b6 Welcome to RISC-V Studio \u2122 , an Eclipse-based development tool for the RISC-V ecosystem The RISC-V Studio\u2122 Integrated Development Environment (IDE) is a flexible and highly configurable software environment that helps the RISC-V developers discover, configure, develop, debug and deploy system designs utilizing open-source and commercial RISC-V IPs and platforms. RISC-V Studio\u2122 works seamlessly with the ecosystem of plugins that are freely available from the Eclipse marketplace . RISC-V Studio\u2122 provides uniques features to save time and improve productivity. It is highly recommended that users be familiar with standard embedded development concepts, practices, and programming languages (C, C++, python). Highlights \u00b6 RISC-V Discovery - select compatible RISC-V IPs and peripherals to deploy on your hardware platforms. Cross-platform Toolchains - utilize tested and optimized RISC-V toolchains and run-time environment to build your RISC-V application binaries from Linux and Windows hosts. Integrated Managed Build - create and customize complex embedded RISC-V applications with a few simple clicks. Debug and Deploy - program RISC-V IPs, download and debug applications with a simple, consistent, and easy-to-use framework. Enhance Visibility - visualize and discover more about the RISC-V platform with the registers viewer, or about the application states with the RTOS objects inspector. License \u00b6 Use of RISC-V Studio is governed by terms under a separate license agreements that are not inclusive as part of this User Guide. Guide Conventions \u00b6 Italics typeface denotes book titles, emphasizes important words, and indicates variables. Boldface typeface denotes file names, key words, and further emphasizes important words and variables.","title":"About This Guide"},{"location":"manual/About-This-Guide/#about-the-user-guide","text":"Welcome to RISC-V Studio \u2122 , an Eclipse-based development tool for the RISC-V ecosystem The RISC-V Studio\u2122 Integrated Development Environment (IDE) is a flexible and highly configurable software environment that helps the RISC-V developers discover, configure, develop, debug and deploy system designs utilizing open-source and commercial RISC-V IPs and platforms. RISC-V Studio\u2122 works seamlessly with the ecosystem of plugins that are freely available from the Eclipse marketplace . RISC-V Studio\u2122 provides uniques features to save time and improve productivity. It is highly recommended that users be familiar with standard embedded development concepts, practices, and programming languages (C, C++, python).","title":"About The User Guide"},{"location":"manual/About-This-Guide/#highlights","text":"RISC-V Discovery - select compatible RISC-V IPs and peripherals to deploy on your hardware platforms. Cross-platform Toolchains - utilize tested and optimized RISC-V toolchains and run-time environment to build your RISC-V application binaries from Linux and Windows hosts. Integrated Managed Build - create and customize complex embedded RISC-V applications with a few simple clicks. Debug and Deploy - program RISC-V IPs, download and debug applications with a simple, consistent, and easy-to-use framework. Enhance Visibility - visualize and discover more about the RISC-V platform with the registers viewer, or about the application states with the RTOS objects inspector.","title":"Highlights"},{"location":"manual/About-This-Guide/#license","text":"Use of RISC-V Studio is governed by terms under a separate license agreements that are not inclusive as part of this User Guide.","title":"License"},{"location":"manual/About-This-Guide/#guide-conventions","text":"Italics typeface denotes book titles, emphasizes important words, and indicates variables. Boldface typeface denotes file names, key words, and further emphasizes important words and variables.","title":"Guide Conventions"},{"location":"manual/Assembler-General-Settings/","text":"Assembler Settings \u00b6 These settings let you control various aspects of the assembler. A general view is shown below in Figure 55. Figure 55 - Assembler General View As with compiler and linker settings, the \u201cCommand\u201d and \u201cAll Options\u201d show exactly how the assembler is to be invoked for files ending with \u201c.s\u201d extension in the selected project. General Settings \u00b6 The General settings let you define preprocessor macros, as well as assembler symbols and search paths, as shown below in Figure 56. Figure 56 - Assembler General Settings","title":"Assembler General Settings"},{"location":"manual/Assembler-General-Settings/#assembler-settings","text":"These settings let you control various aspects of the assembler. A general view is shown below in Figure 55. Figure 55 - Assembler General View As with compiler and linker settings, the \u201cCommand\u201d and \u201cAll Options\u201d show exactly how the assembler is to be invoked for files ending with \u201c.s\u201d extension in the selected project.","title":"Assembler Settings"},{"location":"manual/Assembler-General-Settings/#general-settings","text":"The General settings let you define preprocessor macros, as well as assembler symbols and search paths, as shown below in Figure 56. Figure 56 - Assembler General Settings","title":"General Settings"},{"location":"manual/Breakpoint/","text":"Stopping the program at certain locations in the source code is a necessity and is easily accomplished in RISC-V Studio\u2122 IDE via the breakpoint. Breakpoints are set and cleared by double-clicking on the left margin of the source window. When the program hits the breakpoint it is halted and all the pertinent register and data views are updated. Selecting the \u201cResume\u201d button again will cause the demonstration program to run again. As mentioned previously, breakpoints can be removed simply by double-clicking on them. Alternatively, they can be removed or disabled via the \u201cBreakpoints\u201d dialog. Right-clicking on the breakpoint in this dialog provides selections for the specific breakpoint:","title":"Breakpoint"},{"location":"manual/Building-Blinky-the-Executable/","text":"The RISC-V Studio desktop: Building is simply done by clicking on the build button in the toolbar: The messages in the Console view:","title":"Building Blinky the Executable"},{"location":"manual/Building-Embedded-the-Executable/","text":"The RISC-V Studio desktop: Building is simply done by clicking on the build button in the toolbar: The messages in the Console view:","title":"Building Hello World RISC-V the Executable"},{"location":"manual/Building-Heap2-the-Executable/","text":"The RISC-V Studio desktop: Building is simply done by clicking on the build button in the toolbar: The messages in the Console view:","title":"Building Heap 2 the Executable"},{"location":"manual/Building-Timer-the-Executable/","text":"The RISC-V Studio desktop: Building is simply done by clicking on the build button in the toolbar: The messages in the Console view:","title":"Building Timer the Executable"},{"location":"manual/Building-the-Executable-Stand-Project/","text":"To build the executable, first ensure that the Console tab is selected. This makes it possible to view the progress of the executable build since the actual RISC-V C compiler invocation for each source file and the linker invocation is displayed in the Console view. Next, simply select the Build button to build the executable. Note that the default project settings are for a specific combination of RISC-V MCU device architecture, device, and hardware debug tools. To select a different combination, please refer to the subsequent section in this chapter called Modifying Projects. Once selected, observe compilation and linkage commands in the Console. At this point, the RISC-V Embedded Linux executable is ready for program, execution, and debug. Creating & Editing Files section of this guide contains details of the program and debug processes.","title":"Building the Executable Stand Project"},{"location":"manual/Building-the-Executable/","text":"To build the executable, first ensure that the Console tab is selected. If not, the Console window can be enabled by selecting \u201cWindow -Show View -Console.\u201d The Console window displays the progress of the library build \u2013 including the actual RISC-V C compiler invocation for each source file in the library. Next, simply select the project Build button to build the executable as shown in Figure 38. Figure 38 - Build Menu Selection Note that the default project settings are for the device and hw tools selected at project creation time. For other settings, please refer to the subsequent section in this chapter titled Modifying Projects. Once selected, observe compilation commands in the Console window as shown below in Figure 39. This project products a standalone executable by the name of RISC-V_MTI_LINUX_SAMPLE.elf: Figure 39 - Build Output in Console View","title":"Building the Executable"},{"location":"manual/Building-the-Project/","text":"Display the RISC-V Studio desktop in Figure 21. Figure 21 - RISC-V Studio C/C++ Perspective Note that: \u2022You can select \u201cC/C++\u201d button to view the C perspective at all time \u2022Edit/view source files by double-clicking on it under the Project Explorer At this point, you\u2019re ready to build the RISC-V project. Note that you must install the RISC-V C compiler toolchain prior to using RISC-V Studio in order to build this RISC-V application. (For other PIC MCUs, you may need to select a different RISC-V C compiler.) Building is simply done by clicking on the build button in the toolbar, shown in Figure 22. Figure 22 - Build Button in Toolbar When building finished, display messages in the Console view of Figure 23. Figure 23 - Console View","title":"Building the Project"},{"location":"manual/C-C---Perspective/","text":"The RISC-V Studio perspective provides all the tools necessary to create, edit, assemble, compile, and link an embedded program. Below is the RISC-V Studio C/C++ perspective shown for an empty workspace (a workspace without any projects).","title":"C/C++ Perspective"},{"location":"manual/Closing-Project/","text":"Closing RISC-V Standalone Embedded Project If a specific project is not currently needed, it is easily closed by right-clicking on the desired project to close and then clicking on the \u201cClose Project\u201d selection, as shown below in Figure 42: Figure 42 - Closing Project Menu Selection Below is the C/C++ perspective with the project in a closed state. Figure 43 - C/C++ Perspective in Closed State","title":"Closing Project"},{"location":"manual/Creating-Project/","text":"There are principally two types of projects in RISC-V Studio\u2122 IDE: standalone executable projects or Embedded Linux projects. A standalone executable is a program that does not require the services of an RTOS, whereas an RTOS executable is one that relies on the API published by the respective Real-Time Operating System. Creating a new project in RISC-V Studio\u2122 IDE is easy; simply select \u201cFile -New -Project\u201d as demonstrated in the Simple Example Project in Chapter 3. Figure 34 - RISC-V Project Type Selection Dialog Note above the different standalone and Embedded Linux project types that can be created from RISC-V Studio\u2122 IDE.","title":"Creating Project"},{"location":"manual/Creating-RISCVBlinky-Project/","text":"The easiest way to use FreeRTOS is to start with one of the pre-configured demo application projects by select \u201cFile - New - C Project\u201d choose RISC-V Blinky Demo project:","title":"Creating Blinky Project"},{"location":"manual/Creating-RISCVEmbedded-Project/","text":"Select \u201cFile - New - C Project\u201d choose RISC-V Embedded Project > Hello World RISC-V C project:","title":"Creating Hello World RISC-V Project"},{"location":"manual/Creating-RISCVHeap2-Project/","text":"Select \u201cFile - New - C Project\u201d choose RISC-V Generic Heap 2 Demo project:","title":"Creating Heap 2 Project"},{"location":"manual/Creating-RISCVTimer-Project/","text":"Select \u201cFile -New - C Project\u201d choose RISC-V Generic Timer Demo project:","title":"Creating Timer Project"},{"location":"manual/Creating-Source-Files-Stand-Project/","text":"Creating new source files for an executable project is straightforward; simply follow the file creation instructions found in Creating & Editing Files section. The examples that follow in this chapter are focused on importing existing files, which is typically the more common operation.","title":"Creating Source Files Stand Project"},{"location":"manual/Creating-Source-Files/","text":"Creating new source files for a library project is straightforward; simply follow the file creation instructions found in Creating & Editing Files section. The examples that follow in this chapter are focused on importing existing files, which is typically the more common operation.","title":"Creating Source Files"},{"location":"manual/Creating-Workspace/","text":"Creating a new workspace in RISC-V Studio is very easy and amounts to simply selecting an empty or non-existent directory. If the directory does not exist, RISC-V Studio will create it and in either case prepare the workspace for importing and/or creating new projects. Note that if you don\u2019t specify the complete root directory path, RISC-V Studio will create the workspace directory relative to the RISC-V Studio installation directory. Upon the opening of a newly created workspace, RISC-V Studio shows the Welcome screen and creates storage for the workspace in the specified location on the host computer and prepares it to import and/or create one or more projects. Welcome screen for the new empty workspace: Selecting the \u201cGo to the workbench\u201d button enters the newly created, empty workspace. An empty workspace simply has no projects and as a result the Project Explorer section is blank.","title":"Creating Workspace"},{"location":"manual/Creating-a-New-File/","text":"Creating a new file within a project is accomplished by selecting the \u201cFile -New -Other\u201d menu selection: Once selected, the new resource wizard dialog is displayed, from which \u201cFile\u201d should be selected followed by \u201cNext\u201d as shown: The resulting dialog in shows an example of creating a file named \u201cnew_file.c\u201d in the selected project. After finish is selected, the file \u201cnew_file.c\u201d is now part of the selected project:","title":"Creating a New File"},{"location":"manual/Creating-a-Project/","text":"From the RISC-V Studio workbench, you can begin to create a project for a RISC-V MCU. Start by selecting File->New->Project to show the New Project Dialog in Figure 15: Figure 15 - New Project Dialog Select \u201cC Project\u201d and click \u201cNext\u201d to continue. Figure 16 - Project Types Selection Dialog RISC-V Studio will now present a list of project types to choose from in Figure 16. You may need to check/uncheck the \u201cShow project types and toolchains\u2026\u201d checkbox to show all-available project types for RISC-V MCUs. Select \u201cRISC-V Embedded Linux Project\u201d then select \u201cHello World C Project\u201d for this exercise and enter \u201cRISC-V_LINUX\u201d for Project name. Click \u201cNext\u201d to move to the C Project Dialog, shown in Figure 17. Figure 17 - C Project Dialog","title":"Creating a Project"},{"location":"manual/Creating-an-Stand-Project/","text":"Creating an RISC-V Embedded Linux project is very similar to creating a standalone project \u2013 the biggest difference is the project type selection in the creation process. RISC-V Embedded Linux projects come with source files from the respective RTOS to enable successful generation of an executable utilizing the API from said RTOS. Below is the new project wizard dialog, which has selections for both types of projects. You can see that RISC-V Embedded Linux, and Standalone Embedded are two project types supported by RISC-V Studio\u2122 IDE in Figure 40. Figure 40 - RISC-V Project Types Supported by RISC-V Studio\u2122 IDE Note the Debug and Release options in the dialog. These options allow RISC-V Studio\u2122 IDE to manage two different configurations of the same project. The Debug configuration typically contains settings appropriate for developing and debugging the code in the project, while the Release configuration typically has settings appropriate for finished production code\u2014the main difference being the lack of debug symbols and perhaps higher optimization settings in the Release configuration. The examples in this guide use the Debug configuration.","title":"Creating an Stand Project"},{"location":"manual/Debug-Configurations/","text":"The Debug Configuration specifies the executable image is to be programed on the device, executed and debugged. In addition, you can specify additional GDB commands to be executed at connect time as: Startup Tab in Debug Configuration Dialog By default, RISC-V Studio\u2122 IDE initialize the debug configuration with values appropriate for the selected project when you create a new debug configuration. If a project is not selected, or if the selected project has more than one active build configuration, you will need to explicitly specify the project executable to be used at debug time.","title":"Debug Configurations"},{"location":"manual/Debug-Perspective/","text":"The RISC-V Studio Debug perspective provides all the tools necessary to debug and run an embedded program. Below is the Debug perspective for the RISC-V project:","title":"Debug Perspective"},{"location":"manual/Debug-RISC-VEmbedded-with-hardware/","text":"Option 1: Before debugging, select the Hello World RISC-V C project entry in the Project Explorer then opening the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. Debug Configuration Dialog, create new one by double click On tab Debugger, choose option QEMU in Virtual Platforms and click Apply then Debug Option 2: Select the Hello World RISC-V C Project entry in the Project Explorer then clicking Debug As/ RISC-V application with QEMU Option 3: Right-click on current project > Debug As > RISV-C application with QEMU","title":"Debug Hello World RISC-V Project"},{"location":"manual/Debug-blinky-with-hardware/","text":"Option 1: Before debugging, select the RISC-V Blinky Demo entry in the Project Explorer then opening the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. Debug Configuration Dialog, create new one by double click On tab Debugger, choose option QEMU in Virtual Platforms and click Apply then Debug Option 2: Select the RISC-V Blinky Demo entry in the Project Explorer then clicking Debug As/ RISC-V application with QEMU Option 3: Right-click on current project > Debug As > RISV-C application with QEMU","title":"Debug Blinky Project"},{"location":"manual/Debug-heap2-with-hardware/","text":"Option 1: Before debugging, select the RISC-V Generic Heap 2 Demo entry in the Project Explorer then opening the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. Debug Configuration Dialog, create new one by double click On tab Debugger, choose option QEMU in Virtual Platforms and click Apply then Debug Option 2: Select the RISC-V Generic Heap 2 Demo entry in the Project Explorer then clicking Debug As/ RISC-V application with QEMU Option 3: Right-click on current project > Debug As > RISV-C application with QEMU","title":"Debug Heap 2 Project"},{"location":"manual/Debug-timer-with-hardware/","text":"Option 1: Before debugging, select the RISC-V Generic Timer Demo entry in the Project Explorer then opening the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. Debug Configuration Dialog, create new one by double click On tab Debugger, choose option QEMU in Virtual Platforms and click Apply then Debug Option 2: Select the RISC-V Generic Timer Demo entry in the Project Explorer then clicking Debug As/ RISC-V application with QEMU Option 3: Right-click on current project > Debug As > RISV-C application with QEMU","title":"Debug Timer Project"},{"location":"manual/Debugging-the-Project/","text":"Before you debug, it is recommended that you select the RISC-V entry in the Project Explorer, as shown in Figure 24, before opening the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. Figure 24 - Debug Configuration Dialog Now you can debug the \u201cRISC-V\u201d application by selecting Debug->Debug Configurations, or by clicking on the tiny down arrow next to the cockroach and select \u201cDebug Configurations\u201d as shown in Figure 25. Figure 25 - Opening Debug Configuration Dialog From the Debug Configuration Dialog: \u2022 Select RISC-V Config in the launch list \u2022 Double click on the plus icon in the toolbar to create a new debug configuration for the RISC-V project You should see the Main Debug Tab shown in Figure 26: Figure 26 - Main Debug Tab At this point, RISC-V Studio should offer the Debug perspective and you shall accept, as shown in Figure 27 Figure 27 - Switching to Debug Perspective From the Debug perspective shown in Figure 28, you can press \u201cResume\u201d button to resume execution, or \u201cHalt\u201d to suspend execution. Notice that the debug view should annotate your current program location within the execution flow. In addition, breakpoints, register, and memory viewing are all available with just a few mouse clicks! Figure 28 - Debugging of Application in Debug Perspective The project building and execution facilities of RISC-V Studio are discussed in greater detail in subsequent chapters of this guide. Hopefully, this chapter illustrates just how easy it is to get a project up and running with RISC-V Studio!","title":"Debugging the Project"},{"location":"manual/Deleting-Project/","text":"Deleting a project is done by right clicking on the project and selecting \u201cDelete\u201d Once \u201cDelete\u201d is selected, RISC-V Studio\u2122 IDE presents a dialog that specifies whether or not everything in the project directory is to be deleted. If the contents are not deleted, they may be used in a subsequent creation of another project.","title":"Deleting Project"},{"location":"manual/Deleting-Workspace/","text":"Deleting a workspace in RISC-V Studio is done by simply deleting the sub-directory of the workspace. Doing so will also delete any projects contained within the workspace, since they are all maintained in a workspace-relative fashion.","title":"Deleting Workspace"},{"location":"manual/Deleting-a-File/","text":"Deleting a project file is easy; simply select the file and the \u201cDelete Key.\u201d This will bring the delete file dialog from which simply select \u201cYes\u201d to delete the file.","title":"Deleting a File"},{"location":"manual/Diagnostic-Options/","text":"These options, shown in Figure 54, let you generate extra reports about the executable, including memory usages, files crossed referenced, and one or more trace symbol(s). Figure 54 - Diagnostic Options","title":"Diagnostic Options"},{"location":"manual/Disassembly-Viewing/","text":"The disassembly view is opened by simply selecting the \u201cDisassembly\u201d tab, or Windows->Show Views->Disassembly:","title":"Disassembly Viewing"},{"location":"manual/Editing-an-Existing-File/","text":"Selecting a file to edit is easy; simply double click on the file name in the \u201cProject Explorer\u201d view. Once selected, the file is presented in the source view. Notice that comments are colored a light green, language keywords are colored magenta, and language statements are colored black. These color codings make it easier to write code in the C/C++ language. Editing is free-form, simply click on the desired location to edit and start typing.","title":"Editing an Existing File"},{"location":"manual/Errors-and-Warning-Settings/","text":"This dialog allows you to control various error and warning reporting aspect of the compiler, as shown below in Figure 49. Figure 49 - C Compiler Errors and Warnings Settings","title":"Errors and Warning Settings"},{"location":"manual/General-Options/","text":"Linker Settings \u00b6 The high-level overview of the current C Linker settings is shown below in Figure 50. Figure 50 - Linker High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the linker is going to be invoked for this project. All executables, by default, will be linked with these options. General Options \u00b6 The General Options allows you to control the heap and stack size, as well as to write in additional options not covered by the dialog. A view of the General Option dialog is shown below in Figure 51. Figure 51 - Linker General Options","title":"General Options"},{"location":"manual/General-Options/#linker-settings","text":"The high-level overview of the current C Linker settings is shown below in Figure 50. Figure 50 - Linker High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the linker is going to be invoked for this project. All executables, by default, will be linked with these options.","title":"Linker Settings"},{"location":"manual/General-Options/#general-options","text":"The General Options allows you to control the heap and stack size, as well as to write in additional options not covered by the dialog. A view of the General Option dialog is shown below in Figure 51. Figure 51 - Linker General Options","title":"General Options"},{"location":"manual/General-Settings/","text":"C Compiler Settings \u00b6 The high-level overview of the current C Compiler settings is shown below in Figure 47. Figure 47 - C Compiler High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the compiler is going to be invoked for this project. All files with a \u201c.c\u201d extension will be built, by default, with these options. General Settings \u00b6 The General settings dialog contains options enabling you to control various aspect of code and debug symbol generation by the compiler. You can also define additional pre-processor symbols, as well as include directory search path. An overview of the general setting dialog is shown below in Figure 48. Figure 48 - C Compiler General Settings","title":"General Settings"},{"location":"manual/General-Settings/#c-compiler-settings","text":"The high-level overview of the current C Compiler settings is shown below in Figure 47. Figure 47 - C Compiler High Level Overview The \u201cCommand\u201d and \u201cAll options\u201d entries show exactly how the compiler is going to be invoked for this project. All files with a \u201c.c\u201d extension will be built, by default, with these options.","title":"C Compiler Settings"},{"location":"manual/General-Settings/#general-settings","text":"The General settings dialog contains options enabling you to control various aspect of code and debug symbol generation by the compiler. You can also define additional pre-processor symbols, as well as include directory search path. An overview of the general setting dialog is shown below in Figure 48. Figure 48 - C Compiler General Settings","title":"General Settings"},{"location":"manual/Getting-Help/","text":"Getting Help \u00b6 For the latest product documentation, check the RISC-V Studio\u2122 IDE release page . In addition to this User Guide, there are general Eclipse information resources available from within the IDE. These can be found by selecting the \u201c Help -> Help Contents \u201d menu item: Workbench User Guide for general overview and usage of the Eclipse environment, and C/C++ Development User Guide for an overview of C/C++ support in Eclipse. As RISC-V Studio IDE is based on Eclipse & CDT, both links above are pertinent. Other aspects of the IDE specific to a variety of usability enhancement, and support for RISC-V are documented only in this user guide. Reporting Issues \u00b6 You can use the following link to report an issue, give suggestion for improvement, or share your experience: https://github.com/risc-v-studio-ide/Releases/issues/new . If you report an issue, please make sure that you provide: A detailed description of the problem, including frequency of occurrence and how it can be reliably reproduced. When possible and applicable, attach the project and/or files that cause the problem. The version of the RISC-V Studio IDE that you are using. You can get this information by selecting Help -> About RISC-V Studio . Giving Back \u00b6 RISC-V represents an exciting paradigm shift in how hardware and software products of varying degree of complexity will be made. If you do anything at all worth doing with RISC-V, you're bound to get stuck at some point. Should you find a way forward, either through help or information here or elsewhere, do take moment to give back and help share/post your experience so our team and others users who come after you can benefit from your epiphany.","title":"Getting Help"},{"location":"manual/Getting-Help/#getting-help","text":"For the latest product documentation, check the RISC-V Studio\u2122 IDE release page . In addition to this User Guide, there are general Eclipse information resources available from within the IDE. These can be found by selecting the \u201c Help -> Help Contents \u201d menu item: Workbench User Guide for general overview and usage of the Eclipse environment, and C/C++ Development User Guide for an overview of C/C++ support in Eclipse. As RISC-V Studio IDE is based on Eclipse & CDT, both links above are pertinent. Other aspects of the IDE specific to a variety of usability enhancement, and support for RISC-V are documented only in this user guide.","title":"Getting Help"},{"location":"manual/Getting-Help/#reporting-issues","text":"You can use the following link to report an issue, give suggestion for improvement, or share your experience: https://github.com/risc-v-studio-ide/Releases/issues/new . If you report an issue, please make sure that you provide: A detailed description of the problem, including frequency of occurrence and how it can be reliably reproduced. When possible and applicable, attach the project and/or files that cause the problem. The version of the RISC-V Studio IDE that you are using. You can get this information by selecting Help -> About RISC-V Studio .","title":"Reporting Issues"},{"location":"manual/Getting-Help/#giving-back","text":"RISC-V represents an exciting paradigm shift in how hardware and software products of varying degree of complexity will be made. If you do anything at all worth doing with RISC-V, you're bound to get stuck at some point. Should you find a way forward, either through help or information here or elsewhere, do take moment to give back and help share/post your experience so our team and others users who come after you can benefit from your epiphany.","title":"Giving Back"},{"location":"manual/Getting-Started/","text":"Run RISC-V Studio via the \u201cStart\u201d button or via the RISC-V Studio icon on the desktop: At this point you will observe the RISC-V Studio Workspace Launcher dialog. Select a directory on your host computer that RISC-V Studio can use to store projects and the workspace. Ensure that you have write permission for this directory. More on Eclipse projects and the workspace can be found in the Eclipse documentation: http://help.eclipse.org/kepler/index.jsp If you have selected a new workspace, RISC-V Studio will start at the welcome screen: Shows a quick overview of RISC-V Studio for RISC-V MCUs Shows the web resources available with RISC-V Studio for RISC-V MCUs. You can, for example, download versions of the RISC-V C compiler from this resource. Enter the RISC-V Studio workbench","title":"Getting Started"},{"location":"manual/Home/","text":"Welcome to the RISC-V Studio\u2122 IDE Wiki!","title":"Home"},{"location":"manual/Importing-Source-Files-Stand-Project/","text":"Importing files into newly created project is straightforward; simply drag and drop the desired files into the project. Files may also be imported to the project through menu selections. To explicitly import one or more files, \u201cright-click\u201d on the project as shown below and select the Import menu selection as shown in Figure 41. Figure 41 - Import Menu Selection Once Import is selected, RISC-V Studio\u2122 IDE displays the Import dialog, showing many options for the source of the files to import. Generally, the \u201cFile System\u201d option is the most used source for importing. Select this option to import one or more files from the file system into your project. The File System Import dialog is now displayed. Next, expand the \u201cGeneral\u201d folder, select \u201cFile System,\u201d and select the \u201cNext\u201d button. Simply use the Browse button to navigate to the specific folder containing the source files to import, select the files to import within that directory, and select \u201cFinish.\u201d You will now observe the selected files being imported into the selected project. At this point, all the necessary files for building an RISC-V Embedded Linux executable for RISC-V MCUs are contained in the project. Note that additional files might be required for executable projects and are specified in the linker settings dialogs. Such files include linker control files and the desired library files to be linked with the exec","title":"Importing Source Files Stand Project"},{"location":"manual/Importing-Source-Files/","text":"Importing files into the newly created project is straightforward; simply drag and drop the desired files into the project. Files may also be imported to the project through menu selections. To explicitly import one or more files, \u201cright-click\u201d on the project as shown and select the Import menu selection as shown in Figure 35. Figure 35 - Import Menu Selection Once Import is selected, RISC-V Studio\u2122 IDE displays the Import dialog, showing many options for the source of the files to import. Generally, the \u201cFile System\u201d option is the most used source for importing. The figure below shows the Import dialog, the File System selection and the mouse positioned on the \u201cNext\u201d button ready to proceed. The File System Import dialog is now displayed. Next, expand the \u201cGeneral\u201d folder, select \u201cFile System,\u201d and select the \u201cNext\u201d button. This results in the file browse dialog shown in Figure 36: Figure 36 - File Browser Dialog Simply use the Browse button to navigate to the specific folder containing the source files to import, select the files to import within that directory, and select \u201cFinish.\u201d This is show below in Figure 37. Figure 37 - File Import Dialog","title":"Importing Source Files"},{"location":"manual/Installing-host-tools/","text":"The IDE depends on tools from the host environment for its operation. When these tools are missing, you may encountered issues when using the IDE. An example of what happens when the program make is not available on the host is shown below: This issue can be resolved either by modifying the project settings to utilize Eclipse internal build mechanism (described elsewhere), or by installing the necessary tools on the host as follows: On Linux \u00b6 The make program and utilities needed build Ubuntu/Debian packages can be installed on an Ubuntu Linux host by, $ sudo apt-get install build-essential Upon completion, check if make is available: $ which make /usr/bin/make Finally, restart the IDE.","title":"Install Host Tools"},{"location":"manual/Installing-host-tools/#on-linux","text":"The make program and utilities needed build Ubuntu/Debian packages can be installed on an Ubuntu Linux host by, $ sudo apt-get install build-essential Upon completion, check if make is available: $ which make /usr/bin/make Finally, restart the IDE.","title":"On Linux"},{"location":"manual/Installing-on-Linux/","text":"RISC-V Studio Install Flow \u00b6 RISC-V Studio utilizes izPack to manage installation on the host machine. To install RISC-V Studio, run the executable installer, either from the command line, or by double-clicking on it from the desktop. The main RISC-V Studio installer screen is shown below: Select the \u201c Next \u201d button to proceed with the installation. The RISC-V Studio release note is shown. Please read over to verify if the contents meet your expectation, and select the \u201c Next \u201d to proceed: Once \u201c Next \u201d is selected, you shall be presented with the RISC-V Studio End User License Agreement. Review this agreement carefully, select \u201cI accept the terms of this license agreement\u201d and \u201c Next \u201d to continue or \u201c Quit \u201d to exit. Figure 6 - RISC-V Studio License Agreement Once \u201c Next \u201d is selected, RISC-V Studio presents the packages to install in Figure 7. It is recommended that you simply select \u201c Next \u201d to proceed. Once \u201c Next \u201d is selected, RISC-V Studio installer presents the installation path in Figure 9. You can choose to keep the recommended installation path, or enter an alternative. Select \u201c Next \u201d to continue. If RISC-V Studio has previously been installed in the selected path, you will be asked whether or not to overwrite the existing installation as shown. It is strongly recommended that you select an alternate path in this case The RISC-V Studio installer presents a summary of packages to be installed. Simply select \u201c Next \u201d to proceed. Once \u201c Next \u201d is selected, RISC-V Studio shall begin to copy the selected packages into the installation directory. After all the RISC-V Studio files have been copied, one final dialog is presented below. Simply select the \u201c Done \u201d button to complete the installation of RISC-V Studio. You are now ready to use RISC-V Studio for RISC-V Processors!","title":"Installing on Linux"},{"location":"manual/Installing-on-Linux/#risc-v-studio-install-flow","text":"RISC-V Studio utilizes izPack to manage installation on the host machine. To install RISC-V Studio, run the executable installer, either from the command line, or by double-clicking on it from the desktop. The main RISC-V Studio installer screen is shown below: Select the \u201c Next \u201d button to proceed with the installation. The RISC-V Studio release note is shown. Please read over to verify if the contents meet your expectation, and select the \u201c Next \u201d to proceed: Once \u201c Next \u201d is selected, you shall be presented with the RISC-V Studio End User License Agreement. Review this agreement carefully, select \u201cI accept the terms of this license agreement\u201d and \u201c Next \u201d to continue or \u201c Quit \u201d to exit. Figure 6 - RISC-V Studio License Agreement Once \u201c Next \u201d is selected, RISC-V Studio presents the packages to install in Figure 7. It is recommended that you simply select \u201c Next \u201d to proceed. Once \u201c Next \u201d is selected, RISC-V Studio installer presents the installation path in Figure 9. You can choose to keep the recommended installation path, or enter an alternative. Select \u201c Next \u201d to continue. If RISC-V Studio has previously been installed in the selected path, you will be asked whether or not to overwrite the existing installation as shown. It is strongly recommended that you select an alternate path in this case The RISC-V Studio installer presents a summary of packages to be installed. Simply select \u201c Next \u201d to proceed. Once \u201c Next \u201d is selected, RISC-V Studio shall begin to copy the selected packages into the installation directory. After all the RISC-V Studio files have been copied, one final dialog is presented below. Simply select the \u201c Done \u201d button to complete the installation of RISC-V Studio. You are now ready to use RISC-V Studio for RISC-V Processors!","title":"RISC-V Studio Install Flow"},{"location":"manual/Installing-on-Windows/","text":"We recommend that RISC-V Studio\u2122 IDE be installed in the default directory, which varies depending on the host computer Operating System. On Windows, RISC-V Studio\u2122 IDE is installed under: c: \\P rogram Files \\R ISC-V Studio\u2122 IDE Subsequent releases of the IDE will install in version specific directories to allow multiple versions to co-exist on the same host platform. RISC-V Studio\u2122 IDE Install Flow \u00b6 RISC-V Studio\u2122 IDE utilizes izPack to manage the installation on the host machine. To install the IDE, run the executable installer, either from the command line, or by double-clicking on the executable from the desktop or file manager. The main RISC-V Studio\u2122 IDE installer screen is shown below: Select the \u201cNext\u201d button to proceed with the installation. The RISC-V Studio\u2122 IDE release note is shown below. Please read over to verify that the contents meet your expectation, and select the \u201cNext\u201d to proceed: You shall be presented with the RISC-V Studio\u2122 IDE End User License Agreement. Review carefully, select \u201cI accept the terms of this license agreement\u201d and \u201cNext\u201d to continue or \u201cQuit\u201d to exit. Figure 6 - RISC-V Studio\u2122 IDE License Agreement Once \u201cNext\u201d is selected, RISC-V Studio\u2122 IDE presents the packages to install in Figure 7. It is recommended that you simply select \u201cNext\u201d to proceed. Figure 7 - Package Selection Once \u201cNext\u201d is selected, RISC-V Studio\u2122 IDE installer presents the installation path below. You can choose to keep the recommended installation path, or enter an alternative. Select \u201cNext\u201d to continue. If RISC-V Studio\u2122 IDE has previously been installed in the selected path, you will be asked whether or not to overwrite the existing installation. It is a good idea that you select an alternate path in this case. The RISC-V Studio\u2122 IDE installer presents a summary of packages to be installed in. Select \u201cNext\u201d to proceed. The installer shall begin to copy the selected packages into the installation directory, shown below. After all the files have been copied, click the \u201cDone\u201d button to complete the installation of RISC-V Studio\u2122 IDE. The RISC-V Studio\u2122 IDE is now installed on your host system.","title":"Installing on Windows"},{"location":"manual/Installing-on-Windows/#risc-v-studiotm-ide-install-flow","text":"RISC-V Studio\u2122 IDE utilizes izPack to manage the installation on the host machine. To install the IDE, run the executable installer, either from the command line, or by double-clicking on the executable from the desktop or file manager. The main RISC-V Studio\u2122 IDE installer screen is shown below: Select the \u201cNext\u201d button to proceed with the installation. The RISC-V Studio\u2122 IDE release note is shown below. Please read over to verify that the contents meet your expectation, and select the \u201cNext\u201d to proceed: You shall be presented with the RISC-V Studio\u2122 IDE End User License Agreement. Review carefully, select \u201cI accept the terms of this license agreement\u201d and \u201cNext\u201d to continue or \u201cQuit\u201d to exit. Figure 6 - RISC-V Studio\u2122 IDE License Agreement Once \u201cNext\u201d is selected, RISC-V Studio\u2122 IDE presents the packages to install in Figure 7. It is recommended that you simply select \u201cNext\u201d to proceed. Figure 7 - Package Selection Once \u201cNext\u201d is selected, RISC-V Studio\u2122 IDE installer presents the installation path below. You can choose to keep the recommended installation path, or enter an alternative. Select \u201cNext\u201d to continue. If RISC-V Studio\u2122 IDE has previously been installed in the selected path, you will be asked whether or not to overwrite the existing installation. It is a good idea that you select an alternate path in this case. The RISC-V Studio\u2122 IDE installer presents a summary of packages to be installed in. Select \u201cNext\u201d to proceed. The installer shall begin to copy the selected packages into the installation directory, shown below. After all the files have been copied, click the \u201cDone\u201d button to complete the installation of RISC-V Studio\u2122 IDE. The RISC-V Studio\u2122 IDE is now installed on your host system.","title":"RISC-V Studio\u2122  IDE Install Flow"},{"location":"manual/Launching-The-New-Connection/","text":"Launching an existing connection is very simple; just click on the Debug button as shown below: At this point the connection is ready for execution and debugging of the specified executable image.","title":"Launching The New Connection"},{"location":"manual/Libraries-Options/","text":"These options, shown in Figure 53, let you specify one or more standard libraries to link with the project executable. In the event that one or more libraries are not part of the RISC-V toolchain (i.e. they reside in a different directory), you can also specify one or more search paths for the libraries. Other options include the ability to exclude standard libraries, start-up code, or floating point library. Note that the selections in the Libraries dialog specify the \u201cc\u201d and \u201cgcc\u201d libraries. It is the GNU linker than then prepends the \u201clib\u201d modifier to the library names specified and thus expects to find \u201clibc.a\u201d and \u201clibgcc.a\u201d library files in one of the specified library paths. RISC-V Studio\u2122 IDE also makes it possible to specify the path and actual name of library files. The \u201cAdditional Inputs ( .o/ .lib)\u201d dialog is used to do this. Please note that references to actual path on your host computer will make your project/workspace not portable to other host systems. Figure 53 - Library Options","title":"Libraries Options"},{"location":"manual/Memory-Viewing/","text":"The target memory is easily viewed; simply select the \u201cMemory\u201d tab, or Windows->Show Views->Memory: Once selected, the \u201cMemory\u201d window (Empty) is displayed: To add an address to display in the \u201cMemory\u201d view, simply click the plus icon to bring up the address dialog: Entering \u201c&InitApp\u201d causes the address of this variable in the demonstration system to be displayed","title":"Memory Viewing"},{"location":"manual/Modifying-Projects/","text":"There are many build options available for RISC-V Studio\u2122 IDE for RISC-V MCUs developers. The options are available through the Properties dialog. To bring up the Properties dialog, right click on the project name and then select \u201cProperties,\u201d as shown below in Figure 44. Figure 44 - Project Properties Selection Selecting \u201cProperties\u201d results in RISC-V Studio\u2122 IDE bringing up the Properties dialog. This dialog has many configuration options, however, the most typically used options are found within the \u201cC/C++ Build -> Settings\u201d selection, shown here in Figure 45. Figure 45 - C/C++ Build / Settings Selection","title":"Modifying Projects"},{"location":"manual/Optimization-Settings/","text":"The optimization settings dialog allows you to change the optimization level of code generated by the compiler. Note that you will need to upgrade to a paid version of the compiler in order to access the full optimization settings of the compiler.","title":"Optimization Settings"},{"location":"manual/Other-Options/","text":"The Other options let you tune various parameters of the assembler, as shown in Figure 57. Figure 57 - Assembler Other Options","title":"Other Options"},{"location":"manual/Overview/","text":"RISC-V Studio is an integrated dev/ops environment that streamlines the development of software and platforms utilizing the RISC-V ISA. The IDE runs on Linux hosts, and supports standalone embedded applications and popular RTOSes. In both cases, QEMU is the default target platform. Support for other RISC-V targets including emulator, cycle-accurate simulator, FPGA, and RISC-V ASIC are also available. The target and debug components that sit between the IDE front-end and the target platform provide abstractions that enable external open-source and commercial run-time environments and hardware debug tools to be integrated through addins. The interfaces to these components are currently out of scope of this User Guide.","title":"Overview"},{"location":"manual/Program-Code-Viewing/","text":"Viewing program source code in RISC-V Studio\u2122 IDE is easy; simply double-click on the file to view in the \u201cProject Explorer\u201d dialog. Doing so opens the source viewing window with the contents of the selected file","title":"Program Code Viewing"},{"location":"manual/Program-Control/","text":"RISC-V Studio\u2122 IDE automatically places a breakpoint and launches the downloaded image, if the \u201cStop in main\u201d option is selected under the \u201cDebugger\u201d tab. If this is not selected, RISC-V Studio\u2122 IDE simply positions the program counter at the program entry point, which in GNU-built executable is at the label _start.","title":"Program Control"},{"location":"manual/Program-Download/","text":"The processing for making a target connection automatically program the executable unless the \u201cConnect Only\u201d option under the \u201cDebugger\u201d tab is selected. If not selected, establishing a connection will perform all initialization on the target and then download the executable image. The image downloaded can also be verified (read back and compared) to make sure the download was successful. This is accomplished by selecting the \u201cVerify downloaded image\u201d option under the \u201cDebugger\u201d tab. If the verification fails, it is likely that the image is being loaded to an invalid memory address or the board initialization is incorrect.","title":"Program Download"},{"location":"manual/Program-Viewing/","text":"RISC-V Studio\u2122 IDE provides extensive viewing capabilities into the target program, including views of source, disassembly, variables, registers, memory, and ThreadX objects. The following sections describe each of these RISC-V Studio\u2122 IDE views.","title":"Program Viewing"},{"location":"manual/Register-Viewing/","text":"The target processor registers are also available for viewing, simply select the \u201cRegisters\u201d tab, or Windows->Show Views->Registers: Once selected, the \u201cRegisters\u201d window is displayed. By default, the RISC-V MCU registers are shown in the \u201cRegisters\u201d window displayed in decimal format. Clicking on the register shows its value in different formats:","title":"Register Viewing"},{"location":"manual/Requirements-Constraints/","text":"Host Requirements \u00b6 RISC-V Studio supports Linux hosts, and has been tested on Linux 64-bit system (Ubuntu 18.04, Ubuntu 20.04). A minimum of 2GB of RAM, 20 GB of available hard-disk space is required. For optimal performance, more CPU cores, memory, and disk-space are recommended. Disclaimer \u00b6 As with any IDE, RISC-V Studio is a tool that automate what you're meant to do manually, which includes selecting and building a RISC-V system, cross compiling the embedded application, downloading and running the application image, and utimately debugging and monitoring its execution. That said, you still have to know what you're doing. The IDE doesn't fetch coffee, find bugs, or generate perfect code for you. Not yet anyway ... Also, since RISC-V Studio is integrated and enhanced with Eclipse plugins, it may likewise be constrained by their limitations, or afficted by their defects.","title":"Requirements & Constraints"},{"location":"manual/Requirements-Constraints/#host-requirements","text":"RISC-V Studio supports Linux hosts, and has been tested on Linux 64-bit system (Ubuntu 18.04, Ubuntu 20.04). A minimum of 2GB of RAM, 20 GB of available hard-disk space is required. For optimal performance, more CPU cores, memory, and disk-space are recommended.","title":"Host Requirements"},{"location":"manual/Requirements-Constraints/#disclaimer","text":"As with any IDE, RISC-V Studio is a tool that automate what you're meant to do manually, which includes selecting and building a RISC-V system, cross compiling the embedded application, downloading and running the application image, and utimately debugging and monitoring its execution. That said, you still have to know what you're doing. The IDE doesn't fetch coffee, find bugs, or generate perfect code for you. Not yet anyway ... Also, since RISC-V Studio is integrated and enhanced with Eclipse plugins, it may likewise be constrained by their limitations, or afficted by their defects.","title":"Disclaimer"},{"location":"manual/Resume/","text":"Execution of a suspended (or just downloaded) program is resumed via the \u201cResume\u201d button in the Debug dialog: Once selected, the RISC-V Studio\u2122 IDE debugger shows the system running. The program is easily halted via the \u201cSuspend\u201d button: Once selected, the RISC-V Studio\u2122 IDE debugger shows where the system was halted. The program is easily resumed again via the \u201cResume\u201d button.","title":"Resume"},{"location":"manual/Runtime-Environment/","text":"Runtime Environment \u00b6 The IDE uses RISC-V QEMU as a default target to host standalone embedded and Linux applications. Standalone applications \u00b6 At debug time, the IDE spawns an instance of RISC-V QEMU to host the standalone applications. At present, file and console IOs are not yet being fielded and handled through the IDE semi-hosting capability. This feature will be supported in future releases. Linux applications \u00b6 Comming soon","title":"Runtime Environment"},{"location":"manual/Runtime-Environment/#runtime-environment","text":"The IDE uses RISC-V QEMU as a default target to host standalone embedded and Linux applications.","title":"Runtime Environment"},{"location":"manual/Runtime-Environment/#standalone-applications","text":"At debug time, the IDE spawns an instance of RISC-V QEMU to host the standalone applications. At present, file and console IOs are not yet being fielded and handled through the IDE semi-hosting capability. This feature will be supported in future releases.","title":"Standalone applications"},{"location":"manual/Runtime-Environment/#linux-applications","text":"Comming soon","title":"Linux applications"},{"location":"manual/Saving-Changes/","text":"Saving editing changes to a file is done simply by clicking on the \u201cSave\u201d button. The corresponding project can then be rebuilt to incorporate the latest source code changes. If changes are being made during execution and debug, it is important to rebuild the image and download it again in order for the RISC-V Studio debugger to accurately perform source level debugging.","title":"Saving Changes"},{"location":"manual/Single-Step-Into/","text":"Single-stepping allows the developer to execute one statement of code at a time. If a function call is present, selecting the \u201cStep Into\u201d button will step into the function call.","title":"Single Step Into"},{"location":"manual/Single-Step-Mode/","text":"RISC-V Studio\u2122 IDE supports single-stepping by assembly instruction or by C source level statements. The type of single stepping is determined by the \u201cInstruction Stepping Mode\u201d button. By default, the stepping mode is for stepping C source level statements; selecting this button will toggle the mode to assembly level stepping. Another selection of this button will change the mode back to C source level statement stepping.","title":"Single-Step Mode"},{"location":"manual/Single-Step-Over/","text":"The \u201cStep Over\u201d button, operates in the same way as the \u201cStep Into\u201d button except when a function call is present. Instead of stepping into the called function, the \u201cStep Over\u201d button steps to the statement following the called function, i.e., \u201cover the function.\u201d Once selected, the \u201cStep Over\u201d button will cause the program to run to the next instruction after the function call.","title":"Single-Step-Over"},{"location":"manual/Step-Return/","text":"When selected, the \u201cStep Return\u201d button, steps back to the caller of the current function. Selecting the \u201cStep Return\u201d button causes the program to return to the caller.","title":"Step Return"},{"location":"manual/Symbols-and-Macros/","text":"This option group lets you introduce additional linker symbols, as well as pre-processor macro definition used during the linking process, as shown in Figure 52. Figure 52 - Symbols and Macros Settings","title":"Symbols and Macros"},{"location":"manual/Terminating-a-Connection/","text":"When execution and debug of an image is complete and the connection is no longer needed, terminating a connection is very simple; just click on the \u201cTerminate and Remove\u201d button:","title":"Terminating a Connection"},{"location":"manual/Variable-Viewing/","text":"Viewing variables in RISC-V Studio\u2122 IDE is easy; simply select the Windows->Show Views->Variables:","title":"Variable Viewing"},{"location":"manual/Welcome/","text":"Thank you for choosing the RISC-V Studio\u2122 IDE","title":"Welcome"},{"location":"manual/What-is-a-workspace/","text":"RISC-V Studio workspace is effectively a sub-directory that contains one or more RISC-V Studio projects. RISC-V Studio workspaces are fully compatible with Eclipse workspaces, meaning that a workspace created by RISC-V Studio can be opened and viewed by a compatible Eclipse IDE. A workspace can contain one or more project(s).","title":"About Workspace"},{"location":"manual/_Footer/","text":"Copyright\u00a9 2021. SoC.one","title":" Footer"},{"location":"manual/_Sidebar/","text":"Before you start \u00b6 About This Guide Getting Help Introduction \u00b6 About the IDE Requirements & Constraints Overview Installation \u00b6 Installing on Windows Installing on Linux Install Host Tools Simple Example Project \u00b6 Getting Started Creating a Project Building the Project Debugging the Project Perspective \u00b6 C/C++ Perspective Debug Perspective Workspace \u00b6 About Workspace Creating Workspace Deleting Workspace Projects \u00b6 RISC-V freeRTOS Project \u00b6 Creating Project Building the Executable Debug with hardware RISC-V Embedded Linux Project \u00b6 Creating Project Creating Source Files Importing Source Files Building the Executable RISC-V Standalone Embedded Project \u00b6 Creating Project Creating Source Files Importing Source Files Building the Executable Closing Project Modifying Projects Deleting Project RISC-V C Compiler Settings \u00b6 General Settings Errors and Warning Settings Optimization Settings RISC-V Linker Settings \u00b6 General Options Symbols and Macros Libraries Options Diagnostic Options RISC-V Assembler Settings \u00b6 General Settings Other Options Creating & Editing Files \u00b6 Creating a New File Deleting a File Editing an Existing File Saving Changes Running & Debugging \u00b6 Runtime Environment Debug Configurations Launching The New Connection Terminating a Connection Program Download Program Control Resume Breakpoint Single-Step Mode Single Step Into Single-Step-Over Step Return Program Viewing Program Code Viewing Disassembly Viewing Variable Viewing Register Viewing Memory Viewing","title":"Before you start"},{"location":"manual/_Sidebar/#before-you-start","text":"About This Guide Getting Help","title":"Before you start"},{"location":"manual/_Sidebar/#introduction","text":"About the IDE Requirements & Constraints Overview","title":"Introduction"},{"location":"manual/_Sidebar/#installation","text":"Installing on Windows Installing on Linux Install Host Tools","title":"Installation"},{"location":"manual/_Sidebar/#simple-example-project","text":"Getting Started Creating a Project Building the Project Debugging the Project","title":"Simple Example Project"},{"location":"manual/_Sidebar/#perspective","text":"C/C++ Perspective Debug Perspective","title":"Perspective"},{"location":"manual/_Sidebar/#workspace","text":"About Workspace Creating Workspace Deleting Workspace","title":"Workspace"},{"location":"manual/_Sidebar/#projects","text":"","title":"Projects"},{"location":"manual/_Sidebar/#risc-v-freertos-project","text":"Creating Project Building the Executable Debug with hardware","title":"RISC-V freeRTOS Project"},{"location":"manual/_Sidebar/#risc-v-embedded-linux-project","text":"Creating Project Creating Source Files Importing Source Files Building the Executable","title":"RISC-V Embedded Linux Project"},{"location":"manual/_Sidebar/#risc-v-standalone-embedded-project","text":"Creating Project Creating Source Files Importing Source Files Building the Executable Closing Project Modifying Projects Deleting Project","title":"RISC-V Standalone Embedded Project"},{"location":"manual/_Sidebar/#risc-v-c-compiler-settings","text":"General Settings Errors and Warning Settings Optimization Settings","title":"RISC-V C Compiler Settings"},{"location":"manual/_Sidebar/#risc-v-linker-settings","text":"General Options Symbols and Macros Libraries Options Diagnostic Options","title":"RISC-V Linker Settings"},{"location":"manual/_Sidebar/#risc-v-assembler-settings","text":"General Settings Other Options","title":"RISC-V Assembler Settings"},{"location":"manual/_Sidebar/#creating-editing-files","text":"Creating a New File Deleting a File Editing an Existing File Saving Changes","title":"Creating &amp; Editing Files"},{"location":"manual/_Sidebar/#running-debugging","text":"Runtime Environment Debug Configurations Launching The New Connection Terminating a Connection Program Download Program Control Resume Breakpoint Single-Step Mode Single Step Into Single-Step-Over Step Return Program Viewing Program Code Viewing Disassembly Viewing Variable Viewing Register Viewing Memory Viewing","title":"Running &amp; Debugging"},{"location":"manual/pipenv/","text":"Start with pipenv \u00b6 pipenv \u00b6 Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans. Install all packages \u00b6 pipenv sync --dev # Installs all packages specified in Pipfile.lock. Run MkDocs \u00b6 pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve pipenv run \u00b6 pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"Start with pipenv"},{"location":"manual/pipenv/#start-with-pipenv","text":"","title":"Start with pipenv"},{"location":"manual/pipenv/#pipenv","text":"Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans.","title":"pipenv"},{"location":"manual/pipenv/#install-all-packages","text":"pipenv sync --dev # Installs all packages specified in Pipfile.lock.","title":"Install all packages"},{"location":"manual/pipenv/#run-mkdocs","text":"pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve","title":"Run MkDocs"},{"location":"manual/pipenv/#pipenv-run","text":"pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"pipenv run"},{"location":"setup/adding-a-comment-system/","text":"Adding a comment system \u00b6 Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of every page by using theme extension . As an example, we'll be integrating Disqus a wildly popular comment provider, but others can be integrate with the same principles Customization \u00b6 Disqus integration \u00b6 In order to integrate a third-party comment provider offering a JavaScript-based solution, follow the guide on theme extension , copy the contents from the content.html partial and create a file at the same location in the overrides folder: overrides/partials/content.html mkdocs.yml <!-- Add copied contents from original content.html here --> <!-- Get setting from mkdocs.yml, but allow page-level overrides --> {% set disqus = config.extra.disqus %} {% if page and page.meta and page.meta.disqus is string %} {% set disqus = page.meta.disqus %} {% endif %} <!-- Inject Disqus into current page --> {% if not page.is_homepage and disqus %} < h2 id = \"__comments\" > {{ lang.t(\"meta.comments\") }} </ h2 > < div id = \"disqus_thread\" ></ div > < script > var disqus_config = function () { this . page . url = \"{{ page.canonical_url }}\" this . page . identifier = \"{{ page.canonical_url | replace(config.site_url, '') }}\" // (1)! } /* Set up for the first time */ if ( typeof DISQUS === \"undefined\" ) { var script = document . createElement ( \"script\" ) script . async = true script . src = \"https://{{ disqus }}.disqus.com/embed.js\" script . setAttribute ( \"data-timestamp\" , Date . now ()) /* Inject script tag */ document . body . appendChild ( script ) /* Set up on navigation (instant loading) */ } else { DISQUS . reset ({ reload : true , config : disqus_config }) } </ script > {% endif %} Ensure you've set [ site_url ][site_url] in mkdocs.yml . extra : disqus : <shortname> # (1)! Add your Disqus shortname here. on a single page \u00b6 When Metadata is enabled, Disqus can be enabled or disabled for a single page with custom front matter. Add the following lines at the top of a Markdown file: Enabled Disabled --- disqus: <shortname> --- # Document title ... --- disqus: \"\" --- # Document title ...","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of every page by using theme extension . As an example, we'll be integrating Disqus a wildly popular comment provider, but others can be integrate with the same principles","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#customization","text":"","title":"Customization"},{"location":"setup/adding-a-comment-system/#disqus-integration","text":"In order to integrate a third-party comment provider offering a JavaScript-based solution, follow the guide on theme extension , copy the contents from the content.html partial and create a file at the same location in the overrides folder: overrides/partials/content.html mkdocs.yml <!-- Add copied contents from original content.html here --> <!-- Get setting from mkdocs.yml, but allow page-level overrides --> {% set disqus = config.extra.disqus %} {% if page and page.meta and page.meta.disqus is string %} {% set disqus = page.meta.disqus %} {% endif %} <!-- Inject Disqus into current page --> {% if not page.is_homepage and disqus %} < h2 id = \"__comments\" > {{ lang.t(\"meta.comments\") }} </ h2 > < div id = \"disqus_thread\" ></ div > < script > var disqus_config = function () { this . page . url = \"{{ page.canonical_url }}\" this . page . identifier = \"{{ page.canonical_url | replace(config.site_url, '') }}\" // (1)! } /* Set up for the first time */ if ( typeof DISQUS === \"undefined\" ) { var script = document . createElement ( \"script\" ) script . async = true script . src = \"https://{{ disqus }}.disqus.com/embed.js\" script . setAttribute ( \"data-timestamp\" , Date . now ()) /* Inject script tag */ document . body . appendChild ( script ) /* Set up on navigation (instant loading) */ } else { DISQUS . reset ({ reload : true , config : disqus_config }) } </ script > {% endif %} Ensure you've set [ site_url ][site_url] in mkdocs.yml . extra : disqus : <shortname> # (1)! Add your Disqus shortname here.","title":"Disqus integration"},{"location":"setup/adding-a-comment-system/#on-a-single-page","text":"When Metadata is enabled, Disqus can be enabled or disabled for a single page with custom front matter. Add the following lines at the top of a Markdown file: Enabled Disabled --- disqus: <shortname> --- # Document title ... --- disqus: \"\" --- # Document title ...","title":"on a single page"},{"location":"setup/adding-a-git-repository/","text":"Adding a git repository \u00b6 If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including statistics like stars and forks. Furthermore, individual documents can be linked to specific source files. Configuration \u00b6 Repository \u00b6 0.1.0 \u00b7 Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url : https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. Repository name \u00b6 0.1.0 \u00b7 Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name : squidfunk/mkdocs-material Repository icon \u00b6 5.0.0 \u00b7 Default: fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme : icon : repo : fontawesome/brands/git-alt Some popular choices: \u2013 fontawesome/brands/git \u2013 fontawesome/brands/git-alt \u2013 fontawesome/brands/git-square \u2013 fontawesome/brands/github \u2013 fontawesome/brands/github-alt \u2013 fontawesome/brands/github-square \u2013 fontawesome/brands/gitlab \u2013 fontawesome/brands/gitkraken \u2013 fontawesome/brands/bitbucket \u2013 fontawesome/solid/trash Edit button \u00b6 0.1.0 \u00b7 Default: automatically set If the repository URL points to a GitHub , GitLab or Bitbucket repository, an edit button is displayed at the top of each document. This behavior can be changed by setting edit_uri in mkdocs.yml : Customize edit path Hide edit button edit_uri : edit/master/docs/ edit_uri : \"\" Revision date \u00b6 4.6.0 \u00b7 Plugin The git-revision-date plugin adds support for displaying the date a document was last updated at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-plugin Then, add the following lines to mkdocs.yml : plugins : - git-revision-date The following configuration options are supported: enabled_if_env Default: none \u2013 When specified, the plugin will only be invoked if the environment variable exists. This makes it easy to disable extraction for cases when the repository is not available: plugins : - git-revision-date : enabled_if_env : CI The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Revision date, localized \u00b6 4.6.0 \u00b7 Plugin Similarly, the git-revision-date-localized plugin adds support for adding a localized update and creation date at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following to mkdocs.yml : plugins : - git-revision-date-localized The following configuration options are supported: type Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : plugins : - git-revision-date-localized : type : date fallback_to_build_date Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: plugins : - git-revision-date-localized : fallback_to_build_date : true enable_creation_date 7.1.4 \u00b7 Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: plugins : - git-revision-date-localized : enable_creation_date : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Adding a git repository"},{"location":"setup/adding-a-git-repository/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including statistics like stars and forks. Furthermore, individual documents can be linked to specific source files.","title":"Adding a git repository"},{"location":"setup/adding-a-git-repository/#configuration","text":"","title":"Configuration"},{"location":"setup/adding-a-git-repository/#repository","text":"0.1.0 \u00b7 Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url : https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered.","title":"Repository"},{"location":"setup/adding-a-git-repository/#repository-name","text":"0.1.0 \u00b7 Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name : squidfunk/mkdocs-material","title":"Repository name"},{"location":"setup/adding-a-git-repository/#repository-icon","text":"5.0.0 \u00b7 Default: fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme : icon : repo : fontawesome/brands/git-alt Some popular choices: \u2013 fontawesome/brands/git \u2013 fontawesome/brands/git-alt \u2013 fontawesome/brands/git-square \u2013 fontawesome/brands/github \u2013 fontawesome/brands/github-alt \u2013 fontawesome/brands/github-square \u2013 fontawesome/brands/gitlab \u2013 fontawesome/brands/gitkraken \u2013 fontawesome/brands/bitbucket \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"setup/adding-a-git-repository/#edit-button","text":"0.1.0 \u00b7 Default: automatically set If the repository URL points to a GitHub , GitLab or Bitbucket repository, an edit button is displayed at the top of each document. This behavior can be changed by setting edit_uri in mkdocs.yml : Customize edit path Hide edit button edit_uri : edit/master/docs/ edit_uri : \"\"","title":"Edit button"},{"location":"setup/adding-a-git-repository/#revision-date","text":"4.6.0 \u00b7 Plugin The git-revision-date plugin adds support for displaying the date a document was last updated at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-plugin Then, add the following lines to mkdocs.yml : plugins : - git-revision-date The following configuration options are supported: enabled_if_env Default: none \u2013 When specified, the plugin will only be invoked if the environment variable exists. This makes it easy to disable extraction for cases when the repository is not available: plugins : - git-revision-date : enabled_if_env : CI The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Revision date"},{"location":"setup/adding-a-git-repository/#revision-date-localized","text":"4.6.0 \u00b7 Plugin Similarly, the git-revision-date-localized plugin adds support for adding a localized update and creation date at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following to mkdocs.yml : plugins : - git-revision-date-localized The following configuration options are supported: type Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : plugins : - git-revision-date-localized : type : date fallback_to_build_date Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: plugins : - git-revision-date-localized : fallback_to_build_date : true enable_creation_date 7.1.4 \u00b7 Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: plugins : - git-revision-date-localized : enable_creation_date : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Revision date, localized"},{"location":"setup/changing-the-colors/","text":"Changing the colors \u00b6 As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables . Configuration \u00b6 Color palette \u00b6 Color scheme \u00b6 5.2.0 \u00b7 Default: default Material for MkDocs supports two color schemes: a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme: default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_1 code span:nth-child(7)\") name.textContent = attr }) }) Primary color \u00b6 0.2.0 \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color: red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Accent color \u00b6 0.2.0 \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color: .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Color palette toggle \u00b6 7.1.0 \u00b7 Default: none It's also possible to offer a list of color palettes to the user, each of which can include a scheme , primary and accent color each. The user can toggle between those color palettes: theme : palette : # (1)! - scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - scheme : slate # (2)! toggle : icon : material/toggle-switch name : Switch to light mode Note that the theme.palette setting is now defined as a list. With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary. The following properties must be set for each toggle: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb name Default: none \u00b7 Required \u2013 This property is used as the toggle's title attribute and should be set to a discernable name to improve accessibility. It will appear on mouse hover. System preference \u00b6 7.1.0 \u00b7 Default: none In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media property next to the toggle definition in mkdocs.yml : theme : palette : - media : \"(prefers-color-scheme: light)\" # (1)! scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" # (2)! scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode This media query is checked first . It's also the fallback when no media query matches. This media query is checked second . If it doesn't match, the first one is automatically used. When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette. Customization \u00b6 Custom colors \u00b6 Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: docs/stylesheets/extra.css mkdocs.yml : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } extra_css : - stylesheets/extra.css See the file containing the color definitions for a list of all CSS variables. Custom color schemes \u00b6 Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a [data-md-color-scheme=\"...\"] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: docs/stylesheets/extra.css mkdocs.yml [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } theme : palette : scheme : youtube extra_css : - stylesheets/extra.css Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* (1)! */ } The hue value must be in the range of [0, 360]","title":"Changing the colors"},{"location":"setup/changing-the-colors/#changing-the-colors","text":"As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables .","title":"Changing the colors"},{"location":"setup/changing-the-colors/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-colors/#color-palette","text":"","title":"Color palette"},{"location":"setup/changing-the-colors/#color-scheme","text":"5.2.0 \u00b7 Default: default Material for MkDocs supports two color schemes: a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme: default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_1 code span:nth-child(7)\") name.textContent = attr }) })","title":"Color scheme"},{"location":"setup/changing-the-colors/#primary-color","text":"0.2.0 \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color: red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Primary color"},{"location":"setup/changing-the-colors/#accent-color","text":"0.2.0 \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color: .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Accent color"},{"location":"setup/changing-the-colors/#color-palette-toggle","text":"7.1.0 \u00b7 Default: none It's also possible to offer a list of color palettes to the user, each of which can include a scheme , primary and accent color each. The user can toggle between those color palettes: theme : palette : # (1)! - scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - scheme : slate # (2)! toggle : icon : material/toggle-switch name : Switch to light mode Note that the theme.palette setting is now defined as a list. With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary. The following properties must be set for each toggle: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb name Default: none \u00b7 Required \u2013 This property is used as the toggle's title attribute and should be set to a discernable name to improve accessibility. It will appear on mouse hover.","title":"Color palette toggle"},{"location":"setup/changing-the-colors/#system-preference","text":"7.1.0 \u00b7 Default: none In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media property next to the toggle definition in mkdocs.yml : theme : palette : - media : \"(prefers-color-scheme: light)\" # (1)! scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" # (2)! scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode This media query is checked first . It's also the fallback when no media query matches. This media query is checked second . If it doesn't match, the first one is automatically used. When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette.","title":"System preference"},{"location":"setup/changing-the-colors/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-colors/#custom-colors","text":"Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: docs/stylesheets/extra.css mkdocs.yml : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } extra_css : - stylesheets/extra.css See the file containing the color definitions for a list of all CSS variables.","title":"Custom colors"},{"location":"setup/changing-the-colors/#custom-color-schemes","text":"Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a [data-md-color-scheme=\"...\"] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: docs/stylesheets/extra.css mkdocs.yml [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } theme : palette : scheme : youtube extra_css : - stylesheets/extra.css Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* (1)! */ } The hue value must be in the range of [0, 360]","title":"Custom color schemes"},{"location":"setup/changing-the-fonts/","text":"Changing the fonts \u00b6 Material for MkDocs makes it easy to change the typeface of your project documentation, as it directly integrates with Google Fonts . Alternatively, fonts can be custom-loaded if self-hosting is preferred for data privacy reasons or another destination should be used. Configuration \u00b6 Regular font \u00b6 0.1.2 \u00b7 Default: Roboto The regular font is used for all body copy, headlines, and essentially everything that does not need to be monospaced. It can be set to any valid Google Font via mkdocs.yml : theme : font : text : Roboto The typeface will be loaded in 300, 400, 400i and 700 . Monospaced font \u00b6 0.1.2 \u00b7 Default: Roboto Mono The monospaced font is used for code blocks and can be configured separately. Just like the regular font, it can be set to any valid Google Font via mkdocs.yml : theme : font : code : Roboto Mono The typeface will be loaded in 400. Autoloading \u00b6 1.0.0 \u00b7 Default: none If you want to prevent typefaces from being loaded from Google Fonts , e.g. to adhere to data privacy regulations, and fall back to system fonts, add the following lines to mkdocs.yml : theme : font : false Customization \u00b6 Additional fonts \u00b6 If you want to load an (additional) font from another destination or override the system font, you can use an additional style sheet to add the corresponding @font-face definition: docs/stylesheets/extra.css mkdocs.yml @ font-face { font-family : \"<font>\" ; src : \"...\" ; } extra_css : - stylesheets/extra.css The font can then be applied to specific elements, e.g. only headlines, or globally to be used as the site-wide regular or monospaced font: Regular font Monospaced font : root { --md-text-font : \"<font>\" ; /* (1)! */ } Always define fonts through CSS variables and not font-family , as this would disable the system font fallback. : root { --md-code-font : \"<font>\" ; }","title":"Changing the fonts"},{"location":"setup/changing-the-fonts/#changing-the-fonts","text":"Material for MkDocs makes it easy to change the typeface of your project documentation, as it directly integrates with Google Fonts . Alternatively, fonts can be custom-loaded if self-hosting is preferred for data privacy reasons or another destination should be used.","title":"Changing the fonts"},{"location":"setup/changing-the-fonts/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-fonts/#regular-font","text":"0.1.2 \u00b7 Default: Roboto The regular font is used for all body copy, headlines, and essentially everything that does not need to be monospaced. It can be set to any valid Google Font via mkdocs.yml : theme : font : text : Roboto The typeface will be loaded in 300, 400, 400i and 700 .","title":"Regular font"},{"location":"setup/changing-the-fonts/#monospaced-font","text":"0.1.2 \u00b7 Default: Roboto Mono The monospaced font is used for code blocks and can be configured separately. Just like the regular font, it can be set to any valid Google Font via mkdocs.yml : theme : font : code : Roboto Mono The typeface will be loaded in 400.","title":"Monospaced font"},{"location":"setup/changing-the-fonts/#autoloading","text":"1.0.0 \u00b7 Default: none If you want to prevent typefaces from being loaded from Google Fonts , e.g. to adhere to data privacy regulations, and fall back to system fonts, add the following lines to mkdocs.yml : theme : font : false","title":"Autoloading"},{"location":"setup/changing-the-fonts/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-fonts/#additional-fonts","text":"If you want to load an (additional) font from another destination or override the system font, you can use an additional style sheet to add the corresponding @font-face definition: docs/stylesheets/extra.css mkdocs.yml @ font-face { font-family : \"<font>\" ; src : \"...\" ; } extra_css : - stylesheets/extra.css The font can then be applied to specific elements, e.g. only headlines, or globally to be used as the site-wide regular or monospaced font: Regular font Monospaced font : root { --md-text-font : \"<font>\" ; /* (1)! */ } Always define fonts through CSS variables and not font-family , as this would disable the system font fallback. : root { --md-code-font : \"<font>\" ; }","title":"Additional fonts"},{"location":"setup/changing-the-language/","text":"Changing the language \u00b6 Material for MkDocs supports internationalization (i18n) and provides translations for template variables and labels in 40+ languages. Additionally, the site search can be configured to use a language-specific stemmer, if available. Configuration \u00b6 Site language \u00b6 1.12.0 \u00b7 Default: en You can set the site language in mkdocs.yml with: theme : language : en The following languages are supported: af \u2013 Afrikaans ar \u2013 Arabic bg \u2013 Bulgarian bn \u2013 Bengali (Bangla) ca \u2013 Catalan cs \u2013 Czech da \u2013 Danish de \u2013 German el \u2013 Greek en \u2013 English eo \u2013 Esperanto es \u2013 Spanish et \u2013 Estonian fa \u2013 Persian (Farsi) fi \u2013 Finnish fr \u2013 French gl \u2013 Galician he \u2013 Hebrew hi \u2013 Hindi hr \u2013 Croatian hu \u2013 Hungarian id \u2013 Indonesian is \u2013 Icelandic it \u2013 Italian ja \u2013 Japanese ka \u2013 Georgian kr \u2013 Korean mn \u2013 Mongolian my \u2013 Burmese nl \u2013 Dutch nn \u2013 Norwegian (Nynorsk) no \u2013 Norwegian pl \u2013 Polish pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian sh \u2013 Serbo-Croatian si \u2013 Sinhalese sk \u2013 Slovak sl \u2013 Slovenian sr \u2013 Serbian sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish uk \u2013 Ukrainian vi \u2013 Vietnamese zh \u2013 Chinese (Simplified) zh-Hant \u2013 Chinese (Traditional) zh-TW \u2013 Chinese (Taiwanese) Add language Note that some languages will produce unreadable anchor links due to the way the default slug function works. Consider using a Unicode-aware slug function . Site language selector \u00b6 7.0.0 \u00b7 Default: none \u00b7 Experimental If your documentation is available in multiple languages, a language selector pointing to those languages can be added to the header. Alternate languages can be defined via mkdocs.yml . extra : alternate : - name : English link : /en/ # (1)! lang : en - name : Deutsch link : /de/ lang : de Note that this must be an absolute link. If it includes a domain part, it's used as defined. Otherwise the domain part of the site_url as set in mkdocs.yml is prepended to the link. The following properties must be set for each alternate language: name Default: none \u00b7 Required \u2013 This value of this property is used inside the language selector as the name of the language and must be set to a non-empty string. link Default: none \u00b7 Required \u2013 This property must be set to an absolute link, which might also point to another domain or subdomain not necessarily generated with MkDocs. lang Default: none \u00b7 Required \u2013 This property must contain an ISO 639-1 language code and is used for the hreflang attribute of the link, improving discoverability via search engines. Directionality \u00b6 2.5.0 \u00b7 Default: automatically set While many languages are read ltr (left-to-right), Material for MkDocs also supports rtl (right-to-left) directionality which is deduced from the selected language, but can also be set with: theme : direction : ltr Click on a tile to change the directionality: ltr rtl var buttons = document.querySelectorAll(\"button[data-md-dir]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-dir\") document.body.dir = attr var name = document.querySelector(\"#__code_3 code span:nth-child(5)\") name.textContent = attr }) }) Customization \u00b6 Custom translations \u00b6 If you want to customize some of the translations for a language, just follow the guide on theme extension and create a new partial in the overrides folder. Then, import the translations of the language as a fallback and only adjust the ones you want to override: overrides/partials/languages/custom.html mkdocs.yml <!-- Import translations for language and fallback --> {% import \"partials/languages/de.html\" as language %} {% import \"partials/languages/en.html\" as fallback %} <!-- (1)! --> <!-- Define custom translations --> {% macro override(key) %}{{ { \"source.file.date.created\": \"Erstellt am\", <!-- (2)! --> \"source.file.date.updated\": \"Aktualisiert am\" }[key] }}{% endmacro %} <!-- Re-export translations --> {% macro t(key) %}{{ override(key) or language(key) or fallback.t(key) }}{% endmacro %} Note that en must always be used as a fallback language, as it's the default theme language. Check the list of available languages , pick the translation you want to override for your language and add them here. theme : language : custom","title":"Changing the language"},{"location":"setup/changing-the-language/#changing-the-language","text":"Material for MkDocs supports internationalization (i18n) and provides translations for template variables and labels in 40+ languages. Additionally, the site search can be configured to use a language-specific stemmer, if available.","title":"Changing the language"},{"location":"setup/changing-the-language/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-language/#site-language","text":"1.12.0 \u00b7 Default: en You can set the site language in mkdocs.yml with: theme : language : en The following languages are supported: af \u2013 Afrikaans ar \u2013 Arabic bg \u2013 Bulgarian bn \u2013 Bengali (Bangla) ca \u2013 Catalan cs \u2013 Czech da \u2013 Danish de \u2013 German el \u2013 Greek en \u2013 English eo \u2013 Esperanto es \u2013 Spanish et \u2013 Estonian fa \u2013 Persian (Farsi) fi \u2013 Finnish fr \u2013 French gl \u2013 Galician he \u2013 Hebrew hi \u2013 Hindi hr \u2013 Croatian hu \u2013 Hungarian id \u2013 Indonesian is \u2013 Icelandic it \u2013 Italian ja \u2013 Japanese ka \u2013 Georgian kr \u2013 Korean mn \u2013 Mongolian my \u2013 Burmese nl \u2013 Dutch nn \u2013 Norwegian (Nynorsk) no \u2013 Norwegian pl \u2013 Polish pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian sh \u2013 Serbo-Croatian si \u2013 Sinhalese sk \u2013 Slovak sl \u2013 Slovenian sr \u2013 Serbian sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish uk \u2013 Ukrainian vi \u2013 Vietnamese zh \u2013 Chinese (Simplified) zh-Hant \u2013 Chinese (Traditional) zh-TW \u2013 Chinese (Taiwanese) Add language Note that some languages will produce unreadable anchor links due to the way the default slug function works. Consider using a Unicode-aware slug function .","title":"Site language"},{"location":"setup/changing-the-language/#site-language-selector","text":"7.0.0 \u00b7 Default: none \u00b7 Experimental If your documentation is available in multiple languages, a language selector pointing to those languages can be added to the header. Alternate languages can be defined via mkdocs.yml . extra : alternate : - name : English link : /en/ # (1)! lang : en - name : Deutsch link : /de/ lang : de Note that this must be an absolute link. If it includes a domain part, it's used as defined. Otherwise the domain part of the site_url as set in mkdocs.yml is prepended to the link. The following properties must be set for each alternate language: name Default: none \u00b7 Required \u2013 This value of this property is used inside the language selector as the name of the language and must be set to a non-empty string. link Default: none \u00b7 Required \u2013 This property must be set to an absolute link, which might also point to another domain or subdomain not necessarily generated with MkDocs. lang Default: none \u00b7 Required \u2013 This property must contain an ISO 639-1 language code and is used for the hreflang attribute of the link, improving discoverability via search engines.","title":"Site language selector"},{"location":"setup/changing-the-language/#directionality","text":"2.5.0 \u00b7 Default: automatically set While many languages are read ltr (left-to-right), Material for MkDocs also supports rtl (right-to-left) directionality which is deduced from the selected language, but can also be set with: theme : direction : ltr Click on a tile to change the directionality: ltr rtl var buttons = document.querySelectorAll(\"button[data-md-dir]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-dir\") document.body.dir = attr var name = document.querySelector(\"#__code_3 code span:nth-child(5)\") name.textContent = attr }) })","title":"Directionality"},{"location":"setup/changing-the-language/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-language/#custom-translations","text":"If you want to customize some of the translations for a language, just follow the guide on theme extension and create a new partial in the overrides folder. Then, import the translations of the language as a fallback and only adjust the ones you want to override: overrides/partials/languages/custom.html mkdocs.yml <!-- Import translations for language and fallback --> {% import \"partials/languages/de.html\" as language %} {% import \"partials/languages/en.html\" as fallback %} <!-- (1)! --> <!-- Define custom translations --> {% macro override(key) %}{{ { \"source.file.date.created\": \"Erstellt am\", <!-- (2)! --> \"source.file.date.updated\": \"Aktualisiert am\" }[key] }}{% endmacro %} <!-- Re-export translations --> {% macro t(key) %}{{ override(key) or language(key) or fallback.t(key) }}{% endmacro %} Note that en must always be used as a fallback language, as it's the default theme language. Check the list of available languages , pick the translation you want to override for your language and add them here. theme : language : custom","title":"Custom translations"},{"location":"setup/changing-the-logo-and-icons/","text":"Changing the logo and icons \u00b6 When installing Material for MkDocs, you immediately get access to over 8.000 icons ready to be used for customization of specific parts of the theme and/or when writing your documentation in Markdown. Not enough? You can also add additional icons with minimal effort. Configuration \u00b6 Logo \u00b6 0.1.0 \u00b7 Default: material/library The logo can be changed to a user-provided image (any type, incl. *.png and *.svg ) located in the docs folder, or to any icon bundled with the theme. Add the following lines to mkdocs.yml : Image Icon, bundled theme : logo : assets/logo.png theme : icon : logo : material/library Normally, the logo in the header and sidebar links to the homepage of the documentation, which is the same as site_url . This behavior can be changed with the following configuration: extra : homepage : https://example.com Favicon \u00b6 0.1.0 \u00b7 Default: assets/images/favicon.png The favicon can be changed to a path pointing to a user-provided image, which must be located in the docs folder. Add the following lines to mkdocs.yml : theme : favicon : images/favicon.png Customization \u00b6 Additional icons \u00b6 In order to use custom icons, extend the theme and create a new folder named .icons in the custom_dir you want to use for overrides. Next, add your *.svg icons into a subfolder of the .icons folder. Let's say you downloaded and unpacked the Bootstrap icon set, and want to add it to your project documentation. The structure of your project should look like this: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 .icons/ \u2502 \u2514\u2500 bootstrap/ \u2502 \u2514\u2500 *.svg \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons You can now use all Bootstrap icons.","title":"Changing the logo and icons"},{"location":"setup/changing-the-logo-and-icons/#changing-the-logo-and-icons","text":"When installing Material for MkDocs, you immediately get access to over 8.000 icons ready to be used for customization of specific parts of the theme and/or when writing your documentation in Markdown. Not enough? You can also add additional icons with minimal effort.","title":"Changing the logo and icons"},{"location":"setup/changing-the-logo-and-icons/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-logo-and-icons/#logo","text":"0.1.0 \u00b7 Default: material/library The logo can be changed to a user-provided image (any type, incl. *.png and *.svg ) located in the docs folder, or to any icon bundled with the theme. Add the following lines to mkdocs.yml : Image Icon, bundled theme : logo : assets/logo.png theme : icon : logo : material/library Normally, the logo in the header and sidebar links to the homepage of the documentation, which is the same as site_url . This behavior can be changed with the following configuration: extra : homepage : https://example.com","title":"Logo"},{"location":"setup/changing-the-logo-and-icons/#favicon","text":"0.1.0 \u00b7 Default: assets/images/favicon.png The favicon can be changed to a path pointing to a user-provided image, which must be located in the docs folder. Add the following lines to mkdocs.yml : theme : favicon : images/favicon.png","title":"Favicon"},{"location":"setup/changing-the-logo-and-icons/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-logo-and-icons/#additional-icons","text":"In order to use custom icons, extend the theme and create a new folder named .icons in the custom_dir you want to use for overrides. Next, add your *.svg icons into a subfolder of the .icons folder. Let's say you downloaded and unpacked the Bootstrap icon set, and want to add it to your project documentation. The structure of your project should look like this: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 .icons/ \u2502 \u2514\u2500 bootstrap/ \u2502 \u2514\u2500 *.svg \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons You can now use all Bootstrap icons.","title":"Additional icons"},{"location":"setup/setting-up-navigation/","text":"Setting up navigation \u00b6 A clear and concise navigation structure is an important aspect of good project documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and sections , and its flag-ship feature: instant loading . Configuration \u00b6 Instant loading \u00b6 5.0.0 \u00b7 Feature flag When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to mkdocs.yml : theme : features : - navigation.instant The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application . Now, the search index survives navigation, which is especially useful for large documentation sites. Anchor tracking \u00b6 8.0.0 \u00b7 Feature flag \u00b7 Experimental When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to mkdocs.yml : theme : features : - navigation.tracking Navigation tabs \u00b6 1.1.0 \u00b7 Feature flag When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above 1220px , but remain as-is on mobile. 1 Add the following lines to mkdocs.yml : theme : features : - navigation.tabs Enabled Disabled Sticky navigation tabs \u00b6 7.3.0 \u00b7 Feature flag \u00b7 Experimental When sticky tabs are enabled, navigation tabs will lock below the header and always remain visible when scrolling down. Just add the following two feature flags to mkdocs.yml : theme : features : - navigation.tabs - navigation.tabs.sticky Enabled Disabled Navigation sections \u00b6 6.2.0 \u00b7 Feature flag When sections are enabled, top-level sections are rendered as groups in the sidebar for viewports above 1220px , but remain as-is on mobile. Add the following lines to mkdocs.yml : theme : features : - navigation.sections Enabled Disabled Both feature flags, navigation.tabs and navigation.sections , can be combined with each other. If both feature flags are enabled, sections are rendered for level 2 navigation items. Navigation expansion \u00b6 6.2.0 \u00b7 Feature flag When expansion is enabled, the left sidebar will expand all collapsible subsections by default, so the user doesn't have to open subsections manually. Add the following lines to mkdocs.yml : theme : features : - navigation.expand Enabled Disabled Section index pages \u00b6 7.3.0 \u00b7 Feature flag \u00b7 Experimental When section index pages are enabled, documents can be directly attached to sections, which is particularly useful for providing overview pages. Add the following lines to mkdocs.yml : theme : features : - navigation.indexes Enabled Disabled In order to link a page to a section, create a new document with the name index.md in the respective folder, and add it to the beginning of your navigation section: nav : - Section : - section/index.md - Page 1 : section/page-1.md ... - Page n : section/page-n.md This feature flag is not compatible with toc.integrate . Integrated table of contents \u00b6 6.2.0 \u00b7 Feature flag When navigation integration for the table of contents is enabled, it is always rendered as part of the navigation sidebar on the left. Add the following lines to mkdocs.yml : theme : features : - toc.integrate Enabled Disabled This feature flag is not compatible with navigation.indexes . Back-to-top button \u00b6 7.1.0 \u00b7 Feature flag A back-to-top button can be shown when the user, after scrolling down, starts to scroll up again. It's rendered centered and just below the header. Add the following lines to mkdocs.yml : theme : features : - navigation.top Usage \u00b6 Hiding the sidebars \u00b6 When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - navigation - toc --- # Document title ... Hide navigation Hide table of contents Hide both Customization \u00b6 Keyboard shortcuts \u00b6 Material for MkDocs includes several keyboard shortcuts that make it possible to navigate your project documentation via keyboard. There're two modes: search This mode is active when the search is focused . It provides several key bindings to make search accessible and navigable via keyboard: Down , Up : select next / previous result Esc , Tab : close search dialog Enter : follow selected result global This mode is active when search is not focussed and when there's no other focussed element that is susceptible to keyboard input. The following keys are bound: F , S , / : open search dialog P , , : go to previous page N , . : go to next page Let's say you want to bind some action to the X key. By using additional JavaScript , you can subscribe to the keyboard$ observable and attach your custom event listener: docs/javascripts/shortcuts.js mkdocs.yml keyboard$ . subscribe ( function ( key ) { if ( key . mode === \"global\" && key . type === \"x\" ) { /* Add custom keyboard handler here */ key . claim () // (1)! } }) The call to key.claim() will execute preventDefault() on the underlying event, so the keypress will not propagate further and touch other event listeners. extra_javascript : - javascripts/shortcuts.js Content area width \u00b6 The width of the content area is set so the length of each line doesn't exceed 80-100 characters, depending on the width of the characters. While this is a reasonable default, as longer lines tend to be harder to read, it may be desirable to increase the overall width of the content area, or even make it stretch to the entire available space. This can easily be achieved with an additional style sheet and a few lines of CSS: docs/stylesheets/extra.css mkdocs.yml . md-grid { max-width : 1440 px ; /* (1)! */ } If you want the content area to always stretch to the available screen space, reset max-width with the following CSS: . md-grid { max-width : initial ; } extra_css : - stylesheets/extra.css Prior to 6.2.0, navigation tabs had a slightly different behavior. All top-level pages (i.e. all top-level entries directly refefring to a *.md file) defined inside the nav entry of mkdocs.yml were grouped under the first tab which received the title of the first page. This made it impossible to include a top-level page (or external link) as a tab item, as was reported in #1884 and #2072 . From 6.2.0 on, navigation tabs include all top-level pages and sections. \u21a9","title":"Setting up navigation"},{"location":"setup/setting-up-navigation/#setting-up-navigation","text":"A clear and concise navigation structure is an important aspect of good project documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and sections , and its flag-ship feature: instant loading .","title":"Setting up navigation"},{"location":"setup/setting-up-navigation/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-navigation/#instant-loading","text":"5.0.0 \u00b7 Feature flag When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to mkdocs.yml : theme : features : - navigation.instant The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application . Now, the search index survives navigation, which is especially useful for large documentation sites.","title":"Instant loading"},{"location":"setup/setting-up-navigation/#anchor-tracking","text":"8.0.0 \u00b7 Feature flag \u00b7 Experimental When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to mkdocs.yml : theme : features : - navigation.tracking","title":"Anchor tracking"},{"location":"setup/setting-up-navigation/#navigation-tabs","text":"1.1.0 \u00b7 Feature flag When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above 1220px , but remain as-is on mobile. 1 Add the following lines to mkdocs.yml : theme : features : - navigation.tabs Enabled Disabled","title":"Navigation tabs"},{"location":"setup/setting-up-navigation/#sticky-navigation-tabs","text":"7.3.0 \u00b7 Feature flag \u00b7 Experimental When sticky tabs are enabled, navigation tabs will lock below the header and always remain visible when scrolling down. Just add the following two feature flags to mkdocs.yml : theme : features : - navigation.tabs - navigation.tabs.sticky Enabled Disabled","title":"Sticky navigation tabs"},{"location":"setup/setting-up-navigation/#navigation-sections","text":"6.2.0 \u00b7 Feature flag When sections are enabled, top-level sections are rendered as groups in the sidebar for viewports above 1220px , but remain as-is on mobile. Add the following lines to mkdocs.yml : theme : features : - navigation.sections Enabled Disabled Both feature flags, navigation.tabs and navigation.sections , can be combined with each other. If both feature flags are enabled, sections are rendered for level 2 navigation items.","title":"Navigation sections"},{"location":"setup/setting-up-navigation/#navigation-expansion","text":"6.2.0 \u00b7 Feature flag When expansion is enabled, the left sidebar will expand all collapsible subsections by default, so the user doesn't have to open subsections manually. Add the following lines to mkdocs.yml : theme : features : - navigation.expand Enabled Disabled","title":"Navigation expansion"},{"location":"setup/setting-up-navigation/#section-index-pages","text":"7.3.0 \u00b7 Feature flag \u00b7 Experimental When section index pages are enabled, documents can be directly attached to sections, which is particularly useful for providing overview pages. Add the following lines to mkdocs.yml : theme : features : - navigation.indexes Enabled Disabled In order to link a page to a section, create a new document with the name index.md in the respective folder, and add it to the beginning of your navigation section: nav : - Section : - section/index.md - Page 1 : section/page-1.md ... - Page n : section/page-n.md This feature flag is not compatible with toc.integrate .","title":"Section index pages"},{"location":"setup/setting-up-navigation/#integrated-table-of-contents","text":"6.2.0 \u00b7 Feature flag When navigation integration for the table of contents is enabled, it is always rendered as part of the navigation sidebar on the left. Add the following lines to mkdocs.yml : theme : features : - toc.integrate Enabled Disabled This feature flag is not compatible with navigation.indexes .","title":"Integrated table of contents"},{"location":"setup/setting-up-navigation/#back-to-top-button","text":"7.1.0 \u00b7 Feature flag A back-to-top button can be shown when the user, after scrolling down, starts to scroll up again. It's rendered centered and just below the header. Add the following lines to mkdocs.yml : theme : features : - navigation.top","title":"Back-to-top button"},{"location":"setup/setting-up-navigation/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-navigation/#hiding-the-sidebars","text":"When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - navigation - toc --- # Document title ... Hide navigation Hide table of contents Hide both","title":"Hiding the sidebars"},{"location":"setup/setting-up-navigation/#customization","text":"","title":"Customization"},{"location":"setup/setting-up-navigation/#keyboard-shortcuts","text":"Material for MkDocs includes several keyboard shortcuts that make it possible to navigate your project documentation via keyboard. There're two modes: search This mode is active when the search is focused . It provides several key bindings to make search accessible and navigable via keyboard: Down , Up : select next / previous result Esc , Tab : close search dialog Enter : follow selected result global This mode is active when search is not focussed and when there's no other focussed element that is susceptible to keyboard input. The following keys are bound: F , S , / : open search dialog P , , : go to previous page N , . : go to next page Let's say you want to bind some action to the X key. By using additional JavaScript , you can subscribe to the keyboard$ observable and attach your custom event listener: docs/javascripts/shortcuts.js mkdocs.yml keyboard$ . subscribe ( function ( key ) { if ( key . mode === \"global\" && key . type === \"x\" ) { /* Add custom keyboard handler here */ key . claim () // (1)! } }) The call to key.claim() will execute preventDefault() on the underlying event, so the keypress will not propagate further and touch other event listeners. extra_javascript : - javascripts/shortcuts.js","title":"Keyboard shortcuts"},{"location":"setup/setting-up-navigation/#content-area-width","text":"The width of the content area is set so the length of each line doesn't exceed 80-100 characters, depending on the width of the characters. While this is a reasonable default, as longer lines tend to be harder to read, it may be desirable to increase the overall width of the content area, or even make it stretch to the entire available space. This can easily be achieved with an additional style sheet and a few lines of CSS: docs/stylesheets/extra.css mkdocs.yml . md-grid { max-width : 1440 px ; /* (1)! */ } If you want the content area to always stretch to the available screen space, reset max-width with the following CSS: . md-grid { max-width : initial ; } extra_css : - stylesheets/extra.css Prior to 6.2.0, navigation tabs had a slightly different behavior. All top-level pages (i.e. all top-level entries directly refefring to a *.md file) defined inside the nav entry of mkdocs.yml were grouped under the first tab which received the title of the first page. This made it impossible to include a top-level page (or external link) as a tab item, as was reported in #1884 and #2072 . From 6.2.0 on, navigation tabs include all top-level pages and sections. \u21a9","title":"Content area width"},{"location":"setup/setting-up-site-analytics/","text":"Setting up site analytics \u00b6 As with any other service offered on the web, understanding how your project documentation is actually used can be an essential success factor. Material for MkDocs natively integrates with Google Analytics and offers a customizable cookie consent and a feedback widget . Configuration \u00b6 Google Analytics \u00b6 7.1.8 \u00b7 Default: none Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. Depending on the given property prefix, add the following lines to mkdocs.yml : Google Analytics 4 Universal Analytics extra : analytics : provider : google property : G-XXXXXXXXXX extra : analytics : provider : google property : UA-XXXXXXXX-X How to measure site search usage? Besides page views and events, site search can be tracked to better understand how people use your documentation and what they expect to find. In order to enable site search tracking, the following steps are required: Google Analytics 4 Universal Analytics Go to your Google Analytics admin settings Select the property for the respective tracking code Select the data streams tab and click the corresponding URL Click the gear icon within the enhanced measurement section Ensure that site search is enabled Go to your Google Analytics admin settings Select the property for the respective tracking code Go to the view settings tab Scroll down and enable site search settings Set the query parameter to q Was this page helpful? \u00b6 Insiders \u00b7 insiders-3.2.0 \u00b7 Default: none A simple feedback widget can be included at the bottom of each page, encouraging users to give instant feedback whether a page was helpful or not. Add the following lines to mkdocs.yml : extra : analytics : # (1)! feedback : title : Was this page helpful? ratings : - icon : material/emoticon-happy-outline name : This page was helpful data : 1 note : >- Thanks for your feedback! - icon : material/emoticon-sad-outline name : This page could be improved data : 0 note : >- # (2)! Thanks for your feedback! Help us improve this page by using our <a href=\"...\" target=_blank>feedback form</a>. This feature is natively integrated with Google Analytics , which is why provider and property are also required. However, it's also possible to provide a custom feedback integration . You can add arbitrary HTML tags to the note which is shown after the user submitted the feedback, e.g. to link to a feedback form. Both properties, title and ratings , are required. Note that it's allowed to define more than two ratings, e.g. to implement a 1-5 star rating. Since the feedback widget sends data to a third-party service, it is, of course, natively integrated with the cookie consent feature 1 . How to visualize the collected feedback ratings? To visualize feedback ratings you'll need to create a custom report with Google Analytics that will quickly show you the worst- and best-rated pages of your project documentation. Google Analytics 4 Universal Analytics Go to your Google Analytics dashboard Go to the Configure page on the left hand menu, then select Custom Definitions Click the Custom metrics tab and then Create custom metrics , enter the following values: Metric name: Page helpful Description: Was this page helpful? Event parameter: data Unit of measurement: Standard Go to the Explore page on the left hand menu, create a new blank exploration Configure the report as follows: Dimensions: Add Event name and Page location Metrics: Add Event count and Page helpful (the custom metric created in step 3) Rows: Page location Values: Page helpful Filters: Add a new filter for Event name / exactly matches / feedback Delay in data availability The report may take 24 hours or longer to begin displaying data Go to your Google Analytics dashboard Open the customization panel on the left and go to custom reports Create a new custom report and set a custom title and name Add Avg. Value and Total Events to metric group Add Event Label to dimension drilldown Add Event Category to filters and filter for the value feedback Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved: The following properties must be set for each rating: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/emoticon-happy-outline + material/emoticon-sad-outline + \u2013 material/thumb-up-outline + material/thumb-down-outline + \u2013 material/heart + material/heart-broken name Default: none \u00b7 Required \u2013 The value of this property is shown on user interaction (i.e. keyboard focus or mouse hover), explaining the meaning of the rating behind the icon. data Default: none \u00b7 Required \u2013 The value of this property is sent as a data value with the custom event that is transmitted to Google Analytics 2 (or any custom integration). note Default: none \u00b7 Required \u2013 The value of this property is shown after the user selected the rating. It may contain arbitrary HTML tags, which is especially useful to ask the user to provide more detailed feedback for the current page through a form. It's also possible to pre-fill forms with the URL and title of the current page by using the following placeholders: {url} \u2013 Page URL {title} \u2013 Page title https://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url} In this example, when clicking the link, the user is redirected to the \"new issue\" form of your repository, with a pre-filled title including the path of the current document, e.g.: [Feedback] Setting up site analytics \u2013 /setup/setting-up-site-analytics/ An alternative to GitHub issues is Google Forms . Cookie consent \u00b6 Insiders \u00b7 insiders-2.10.0 \u00b7 Default: none Material for MkDocs ships a native and extensible cookie consent form which asks the user for his consent prior to sending any data via analytics. Add the following to mkdocs.yml : extra : consent : title : Cookie consent description : >- # (1)! We use cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of our documentation and whether users find what they're searching for. With your consent, you're helping us to make our documentation better. You can add arbitrary HTML tags in the description , e.g. to link to your terms of service or other parts of the site. Note that both, title and description , are required. If Google Analytics was configured via mkdocs.yml , the cookie consent will automatically include a setting for the user to disable it. Furthermore, custom cookies can be integrated by using the cookies field: Custom cookie name Custom initial state Custom cookie extra : consent : cookies : analytics : Custom name # (1)! The default name of the analytics cookie is Google Analytics . extra : consent : cookies : analytics : name : Google Analytics checked : false extra : consent : cookies : analytics : Google Analytics # (1)! custom : Custom cookie If you add a custom cookie to the cookies field, the analytics cookie must be added back explicitly, or analytics won't be triggered. When a user first visits your site, a cookie consent form is rendered: In order to comply with GDPR, users must be able to change their cookie settings at any time. This can be done by creating a simple link as part of any document, e.g. your privacy policy: [ Change cookie settings ]( #__consent ){ .md-button } Usage \u00b6 Hiding the feedback widget \u00b6 When Metadata is enabled, the feedback widget can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - feedback --- # Document title ... Customization \u00b6 Custom site analytics \u00b6 In order to integrate another analytics service provider offering a JavaScript-based tracking solution, just follow the guide on theme extension and create a new partial in the overrides folder. The name of the partial is used to configure the custom integration via mkdocs.yml : overrides/partials/integrations/analytics/custom.html mkdocs.yml < script > /* Add custom analytics integration here, e.g. */ var property = \"{{ config.extra.analytics.property }}\" // (1)! /* Wait for page to load and application to mount */ document . addEventListener ( \"DOMContentLoaded\" , function () { location$ . subscribe ( function ( url ) { /* Add custom page event tracking here */ // (2)! }) }) </ script > As an example, this variable receives the value set in mkdocs.yml , which is \"foobar\" for property . If you're using instant loading , you can use the location$ observable to listen for navigation events, which always emits the current URL . extra : analytics : provider : custom property : foobar # (1)! You can add arbitrary key-value combinations to configure your custom integration. This is especially useful if you're sharing the custom integration across multiple repositories. Custom site feedback \u00b6 A custom feedback widget integration just needs to process the events that are generated by users interacting with the feedback widget with the help of some additional JavaScript : docs/javascripts/feedback.js mkdocs.yml var feedback = document . forms . feedback feedback . addEventListener ( \"submit\" , function ( ev ) { ev . preventDefault () /* Retrieve page and feedback value */ var page = document . location . pathname var data = ev . submitter . getAttribute ( \"data-md-value\" ) /* Send feedback value */ console . log ( page , data ) }) extra_javascript : - javascripts/feedback.js Custom cookies \u00b6 If you've customized the cookie consent and added a custom cookie, the user will be prompted to accept your custom cookie. Use additional JavaScript to check whether the user accepted it: docs/javascripts/consent.js mkdocs.yml var consent = __md_get ( \"__consent\" ) if ( consent && consent . custom ) { /* The user accepted the cookie */ } extra_javascript : - javascripts/consent.js If the user doesn't accept the analytics cookie, the feedback widget is not shown. \u21a9 Note that for Google Analytics, the data value must be an integer. \u21a9","title":"Setting up site analytics"},{"location":"setup/setting-up-site-analytics/#setting-up-site-analytics","text":"As with any other service offered on the web, understanding how your project documentation is actually used can be an essential success factor. Material for MkDocs natively integrates with Google Analytics and offers a customizable cookie consent and a feedback widget .","title":"Setting up site analytics"},{"location":"setup/setting-up-site-analytics/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-site-analytics/#google-analytics","text":"7.1.8 \u00b7 Default: none Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. Depending on the given property prefix, add the following lines to mkdocs.yml : Google Analytics 4 Universal Analytics extra : analytics : provider : google property : G-XXXXXXXXXX extra : analytics : provider : google property : UA-XXXXXXXX-X How to measure site search usage? Besides page views and events, site search can be tracked to better understand how people use your documentation and what they expect to find. In order to enable site search tracking, the following steps are required: Google Analytics 4 Universal Analytics Go to your Google Analytics admin settings Select the property for the respective tracking code Select the data streams tab and click the corresponding URL Click the gear icon within the enhanced measurement section Ensure that site search is enabled Go to your Google Analytics admin settings Select the property for the respective tracking code Go to the view settings tab Scroll down and enable site search settings Set the query parameter to q","title":"Google Analytics"},{"location":"setup/setting-up-site-analytics/#was-this-page-helpful","text":"Insiders \u00b7 insiders-3.2.0 \u00b7 Default: none A simple feedback widget can be included at the bottom of each page, encouraging users to give instant feedback whether a page was helpful or not. Add the following lines to mkdocs.yml : extra : analytics : # (1)! feedback : title : Was this page helpful? ratings : - icon : material/emoticon-happy-outline name : This page was helpful data : 1 note : >- Thanks for your feedback! - icon : material/emoticon-sad-outline name : This page could be improved data : 0 note : >- # (2)! Thanks for your feedback! Help us improve this page by using our <a href=\"...\" target=_blank>feedback form</a>. This feature is natively integrated with Google Analytics , which is why provider and property are also required. However, it's also possible to provide a custom feedback integration . You can add arbitrary HTML tags to the note which is shown after the user submitted the feedback, e.g. to link to a feedback form. Both properties, title and ratings , are required. Note that it's allowed to define more than two ratings, e.g. to implement a 1-5 star rating. Since the feedback widget sends data to a third-party service, it is, of course, natively integrated with the cookie consent feature 1 . How to visualize the collected feedback ratings? To visualize feedback ratings you'll need to create a custom report with Google Analytics that will quickly show you the worst- and best-rated pages of your project documentation. Google Analytics 4 Universal Analytics Go to your Google Analytics dashboard Go to the Configure page on the left hand menu, then select Custom Definitions Click the Custom metrics tab and then Create custom metrics , enter the following values: Metric name: Page helpful Description: Was this page helpful? Event parameter: data Unit of measurement: Standard Go to the Explore page on the left hand menu, create a new blank exploration Configure the report as follows: Dimensions: Add Event name and Page location Metrics: Add Event count and Page helpful (the custom metric created in step 3) Rows: Page location Values: Page helpful Filters: Add a new filter for Event name / exactly matches / feedback Delay in data availability The report may take 24 hours or longer to begin displaying data Go to your Google Analytics dashboard Open the customization panel on the left and go to custom reports Create a new custom report and set a custom title and name Add Avg. Value and Total Events to metric group Add Event Label to dimension drilldown Add Event Category to filters and filter for the value feedback Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved: The following properties must be set for each rating: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/emoticon-happy-outline + material/emoticon-sad-outline + \u2013 material/thumb-up-outline + material/thumb-down-outline + \u2013 material/heart + material/heart-broken name Default: none \u00b7 Required \u2013 The value of this property is shown on user interaction (i.e. keyboard focus or mouse hover), explaining the meaning of the rating behind the icon. data Default: none \u00b7 Required \u2013 The value of this property is sent as a data value with the custom event that is transmitted to Google Analytics 2 (or any custom integration). note Default: none \u00b7 Required \u2013 The value of this property is shown after the user selected the rating. It may contain arbitrary HTML tags, which is especially useful to ask the user to provide more detailed feedback for the current page through a form. It's also possible to pre-fill forms with the URL and title of the current page by using the following placeholders: {url} \u2013 Page URL {title} \u2013 Page title https://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url} In this example, when clicking the link, the user is redirected to the \"new issue\" form of your repository, with a pre-filled title including the path of the current document, e.g.: [Feedback] Setting up site analytics \u2013 /setup/setting-up-site-analytics/ An alternative to GitHub issues is Google Forms .","title":"Was this page helpful?"},{"location":"setup/setting-up-site-analytics/#cookie-consent","text":"Insiders \u00b7 insiders-2.10.0 \u00b7 Default: none Material for MkDocs ships a native and extensible cookie consent form which asks the user for his consent prior to sending any data via analytics. Add the following to mkdocs.yml : extra : consent : title : Cookie consent description : >- # (1)! We use cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of our documentation and whether users find what they're searching for. With your consent, you're helping us to make our documentation better. You can add arbitrary HTML tags in the description , e.g. to link to your terms of service or other parts of the site. Note that both, title and description , are required. If Google Analytics was configured via mkdocs.yml , the cookie consent will automatically include a setting for the user to disable it. Furthermore, custom cookies can be integrated by using the cookies field: Custom cookie name Custom initial state Custom cookie extra : consent : cookies : analytics : Custom name # (1)! The default name of the analytics cookie is Google Analytics . extra : consent : cookies : analytics : name : Google Analytics checked : false extra : consent : cookies : analytics : Google Analytics # (1)! custom : Custom cookie If you add a custom cookie to the cookies field, the analytics cookie must be added back explicitly, or analytics won't be triggered. When a user first visits your site, a cookie consent form is rendered: In order to comply with GDPR, users must be able to change their cookie settings at any time. This can be done by creating a simple link as part of any document, e.g. your privacy policy: [ Change cookie settings ]( #__consent ){ .md-button }","title":"Cookie consent"},{"location":"setup/setting-up-site-analytics/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-site-analytics/#hiding-the-feedback-widget","text":"When Metadata is enabled, the feedback widget can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - feedback --- # Document title ...","title":"Hiding the feedback widget"},{"location":"setup/setting-up-site-analytics/#customization","text":"","title":"Customization"},{"location":"setup/setting-up-site-analytics/#custom-site-analytics","text":"In order to integrate another analytics service provider offering a JavaScript-based tracking solution, just follow the guide on theme extension and create a new partial in the overrides folder. The name of the partial is used to configure the custom integration via mkdocs.yml : overrides/partials/integrations/analytics/custom.html mkdocs.yml < script > /* Add custom analytics integration here, e.g. */ var property = \"{{ config.extra.analytics.property }}\" // (1)! /* Wait for page to load and application to mount */ document . addEventListener ( \"DOMContentLoaded\" , function () { location$ . subscribe ( function ( url ) { /* Add custom page event tracking here */ // (2)! }) }) </ script > As an example, this variable receives the value set in mkdocs.yml , which is \"foobar\" for property . If you're using instant loading , you can use the location$ observable to listen for navigation events, which always emits the current URL . extra : analytics : provider : custom property : foobar # (1)! You can add arbitrary key-value combinations to configure your custom integration. This is especially useful if you're sharing the custom integration across multiple repositories.","title":"Custom site analytics"},{"location":"setup/setting-up-site-analytics/#custom-site-feedback","text":"A custom feedback widget integration just needs to process the events that are generated by users interacting with the feedback widget with the help of some additional JavaScript : docs/javascripts/feedback.js mkdocs.yml var feedback = document . forms . feedback feedback . addEventListener ( \"submit\" , function ( ev ) { ev . preventDefault () /* Retrieve page and feedback value */ var page = document . location . pathname var data = ev . submitter . getAttribute ( \"data-md-value\" ) /* Send feedback value */ console . log ( page , data ) }) extra_javascript : - javascripts/feedback.js","title":"Custom site feedback"},{"location":"setup/setting-up-site-analytics/#custom-cookies","text":"If you've customized the cookie consent and added a custom cookie, the user will be prompted to accept your custom cookie. Use additional JavaScript to check whether the user accepted it: docs/javascripts/consent.js mkdocs.yml var consent = __md_get ( \"__consent\" ) if ( consent && consent . custom ) { /* The user accepted the cookie */ } extra_javascript : - javascripts/consent.js If the user doesn't accept the analytics cookie, the feedback widget is not shown. \u21a9 Note that for Google Analytics, the data value must be an integer. \u21a9","title":"Custom cookies"},{"location":"setup/setting-up-site-search/","text":"Setting up site search \u00b6 Material for MkDocs provides an excellent, client-side search implementation, omitting the need for the integration of third-party services, which might be tricky to integrate to be compliant with data privacy regulations. Moreover, with some effort, search can be made available offline . Configuration \u00b6 Built-in search \u00b6 0.1.0 \u00b7 Plugin The built-in search plugin integrates seamlessly with Material for MkDocs, adding multilingual client-side search with lunr and lunr-languages . It's enabled by default, but must be re-added to mkdocs.yml when other plugins are used: plugins : - search The following configuration options are supported: lang Default: automatically set \u2013 This option allows to include the language-specific stemmers provided by lunr-languages . Note that Material for MkDocs will set this automatically based on the site language , but it may be overridden, e.g. to support multiple languages: A single language Multiple languages plugins : - search : lang : ru plugins : - search : lang : # (1)! - en - ru Be aware that including support for other languages increases the general JavaScript payload by around 20kb (before gzip ) and by another 15-30kb per language. The following languages are supported: ar \u2013 Arabic da \u2013 Danish du \u2013 Dutch en \u2013 English fi \u2013 Finnish fr \u2013 French de \u2013 German hu \u2013 Hungarian it \u2013 Italian ja \u2013 Japanese no \u2013 Norwegian pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian es \u2013 Spanish sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish vi \u2013 Vietnamese Material for MkDocs goes to great lengths to support languages that are not part of this list by automatically falling back to the stemmer yielding the best result. separator Default: automatically set \u2013 The separator for indexing and query tokenization can be customized, making it possible to index parts of words separated by other characters than whitespace and - , e.g. by including . : plugins : - search : separator : '[\\s\\-\\.]' # (1)! Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. For more finegrained control over the tokenization process, see the section on tokenizer lookahead . prebuild_index 5.0.0 \u00b7 Deprecated \u00b7 8.0.0 \u00b7 Default: false \u2013 MkDocs can generate a prebuilt index of all pages during build time, which provides performance improvements at the cost of more bandwidth, as it reduces the build time of the search index: plugins : - search : prebuild_index : true Note that this configuration option was removed, as the new search plugin generates up to 50% smaller search indexes, doubling search performance. Read more on the new search plugin The other configuration options of this plugin are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Rich search previews \u00b6 Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders ships rich search previews as part of the new search plugin , which will render code blocks directly in the search result, and highlight all occurrences inside those blocks: Insiders Material for MkDocs Tokenizer lookahead \u00b6 Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders allows for more complex configurations of the separator setting as part of the new search plugin , yielding more influence on the way documents are tokenized: plugins : - search : separator : '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;' The following section explains what can be achieved with tokenizer lookahead: Case changes Version numbers HTML/XML tags (?!\\b)(?=[A-Z][a-z]) PascalCase and camelCase are used as naming conventions in many programming languages. By adding this match group to the separator , words are split at case changes , tokenizing the word PascalCase into Pascal and Case , so both terms can be searched individually. Read more on tokenizing case changes \\.(?!\\d) When . is added to the separator , version numbers would be split into parts, rendering them undiscoverable via search. By adding this match group, a small lookahead is introduced, so version numbers will remain as they are, and can be found through search. Read more on tokenizing version numbers &[lg]t; If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Adding this expression to the separator allows for just that. Read more on tokenizing HTML/XML tags Search suggestions \u00b6 7.2.0 \u00b7 Feature flag \u00b7 Experimental When search suggestions are enabled, the search will display the likeliest completion for the last word which can be accepted with the Right key. Add the following lines to mkdocs.yml : theme : features : - search.suggest Searching for search su yields search suggestions as a suggestion. Search highlighting \u00b6 7.2.0 \u00b7 Feature flag \u00b7 Experimental When search highlighting is enabled and a user clicks on a search result, Material for MkDocs will highlight all occurrences after following the link. Add the following lines to mkdocs.yml : theme : features : - search.highlight Searching for code blocks highlights all occurrences of both terms. Search sharing \u00b6 7.2.0 \u00b7 Feature flag \u00b7 Experimental When search sharing is activated, a share button is rendered next to the reset button, which allows to deep link to the current search query and result. Add the following lines to mkdocs.yml : theme : features : - search.share When a user clicks the share button, the URL is automatically copied to the clipboard. Offline search \u00b6 5.0.0 \u00b7 Plugin If you distribute your documentation as *.html files, the built-in search will not work out-of-the-box due to the restrictions modern browsers impose for security reasons. This can be mitigated with the localsearch plugin in combination with @squidfunk 's iframe-worker polyfill. For setup instructions, refer to the localsearch documentation . Tip When distributing documentation as HTML files to be opened from the file system, you will also want to set use_directory_urls: false in mkdocs.yml to make page links function correctly. Usage \u00b6 Search boosting \u00b6 Insiders \u00b7 insiders-2.8.0 When Metadata is enabled, pages can be boosted in search with custom front matter, which will make them rank higher. Add the following lines at the top of a Markdown file: --- search: boost: 2 # (1)! --- # Document title ... When boosting pages, be gentle and start with low values . Search exclusion \u00b6 Insiders \u00b7 insiders-3.1.0 \u00b7 Experimental When Metadata is enabled, pages can be excluded from search with custom front matter, removing them from the index. Add the following lines at the top of a Markdown file: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown heading: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown inline- or block-level element: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" } ] } Customization \u00b6 The search implementation of Material for MkDocs is probably its most sophisticated feature, as it tries to balance a great typeahead experience, good performance, accessibility, and a result list that is easy to scan. This is where Material for MkDocs deviates from other themes. The following section explains how search can be customized to tailor it to your needs. Query transformation \u00b6 When a user enters a query into the search box, the query is pre-processed before it is submitted to the search index. Material for MkDocs will apply the following transformations, which can be customized by extending the theme : export function defaultTransform ( query : string ) : string { return query . split ( /\"([^\"]+)\"/g ) /* (1)! */ . map (( terms , index ) => index & 1 ? terms . replace ( /^\\b|^(?![^\\x00-\\x7F]|$)|\\s+/g , \" +\" ) : terms ) . join ( \"\" ) . replace ( /\"|(?:^|\\s+)[*+\\-:^~]+(?=\\s+|$)/g , \"\" ) /* (2)! */ . trim () /* (3)! */ } Search for terms in quotation marks and prepend a + modifier to denote that the resulting document must contain all terms, converting the query to an AND query (as opposed to the default OR behavior). While users may expect terms enclosed in quotation marks to map to span queries, i.e. for which order is important, lunr doesn't support them, so the best we can do is to convert the terms to an AND query. Replace control characters which are not located at the beginning of the query or preceded by white space, or are not followed by a non-whitespace character or are at the end of the query string. Furthermore, filter unmatched quotation marks. Trim excess whitespace from left and right. If you want to switch to the default behavior of the mkdocs and readthedocs themes, both of which don't transform the query prior to submission, or customize the transform function, you can do this by overriding the config block : {% extends \"base.html\" %} {% block config %} {{ super() }} < script > var __search = { transform : function ( query ) { return query } } </ script > {% endblock %} The transform function will receive the query string as entered by the user and must return the processed query string to be submitted to the search index. Custom search \u00b6 Material for MkDocs implements search as part of a web worker . If you want to switch the web worker with your own implementation, e.g. to submit search to an external service, you can add a custom JavaScript file to the docs directory and override the config block : {% block config %} {{ super() }} < script > var __search = { worker : \"<url>\" } </ script > {% endblock %} Communication with the search worker is implemented using a designated message format using discriminated unions, i.e. through the type property of the message. See the following interface definitions to learn about the message formats: SearchMessage SearchIndex and SearchResult The sequence and direction of messages is rather intuitive: SearchSetupMessage SearchReadyMessage SearchQueryMessage SearchResultMessage","title":"Setting up site search"},{"location":"setup/setting-up-site-search/#setting-up-site-search","text":"Material for MkDocs provides an excellent, client-side search implementation, omitting the need for the integration of third-party services, which might be tricky to integrate to be compliant with data privacy regulations. Moreover, with some effort, search can be made available offline .","title":"Setting up site search"},{"location":"setup/setting-up-site-search/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-site-search/#built-in-search","text":"0.1.0 \u00b7 Plugin The built-in search plugin integrates seamlessly with Material for MkDocs, adding multilingual client-side search with lunr and lunr-languages . It's enabled by default, but must be re-added to mkdocs.yml when other plugins are used: plugins : - search The following configuration options are supported: lang Default: automatically set \u2013 This option allows to include the language-specific stemmers provided by lunr-languages . Note that Material for MkDocs will set this automatically based on the site language , but it may be overridden, e.g. to support multiple languages: A single language Multiple languages plugins : - search : lang : ru plugins : - search : lang : # (1)! - en - ru Be aware that including support for other languages increases the general JavaScript payload by around 20kb (before gzip ) and by another 15-30kb per language. The following languages are supported: ar \u2013 Arabic da \u2013 Danish du \u2013 Dutch en \u2013 English fi \u2013 Finnish fr \u2013 French de \u2013 German hu \u2013 Hungarian it \u2013 Italian ja \u2013 Japanese no \u2013 Norwegian pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian es \u2013 Spanish sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish vi \u2013 Vietnamese Material for MkDocs goes to great lengths to support languages that are not part of this list by automatically falling back to the stemmer yielding the best result. separator Default: automatically set \u2013 The separator for indexing and query tokenization can be customized, making it possible to index parts of words separated by other characters than whitespace and - , e.g. by including . : plugins : - search : separator : '[\\s\\-\\.]' # (1)! Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. For more finegrained control over the tokenization process, see the section on tokenizer lookahead . prebuild_index 5.0.0 \u00b7 Deprecated \u00b7 8.0.0 \u00b7 Default: false \u2013 MkDocs can generate a prebuilt index of all pages during build time, which provides performance improvements at the cost of more bandwidth, as it reduces the build time of the search index: plugins : - search : prebuild_index : true Note that this configuration option was removed, as the new search plugin generates up to 50% smaller search indexes, doubling search performance. Read more on the new search plugin The other configuration options of this plugin are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Built-in search"},{"location":"setup/setting-up-site-search/#rich-search-previews","text":"Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders ships rich search previews as part of the new search plugin , which will render code blocks directly in the search result, and highlight all occurrences inside those blocks: Insiders Material for MkDocs","title":"Rich search previews"},{"location":"setup/setting-up-site-search/#tokenizer-lookahead","text":"Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders allows for more complex configurations of the separator setting as part of the new search plugin , yielding more influence on the way documents are tokenized: plugins : - search : separator : '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;' The following section explains what can be achieved with tokenizer lookahead: Case changes Version numbers HTML/XML tags (?!\\b)(?=[A-Z][a-z]) PascalCase and camelCase are used as naming conventions in many programming languages. By adding this match group to the separator , words are split at case changes , tokenizing the word PascalCase into Pascal and Case , so both terms can be searched individually. Read more on tokenizing case changes \\.(?!\\d) When . is added to the separator , version numbers would be split into parts, rendering them undiscoverable via search. By adding this match group, a small lookahead is introduced, so version numbers will remain as they are, and can be found through search. Read more on tokenizing version numbers &[lg]t; If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Adding this expression to the separator allows for just that. Read more on tokenizing HTML/XML tags","title":"Tokenizer lookahead"},{"location":"setup/setting-up-site-search/#search-suggestions","text":"7.2.0 \u00b7 Feature flag \u00b7 Experimental When search suggestions are enabled, the search will display the likeliest completion for the last word which can be accepted with the Right key. Add the following lines to mkdocs.yml : theme : features : - search.suggest Searching for search su yields search suggestions as a suggestion.","title":"Search suggestions"},{"location":"setup/setting-up-site-search/#search-highlighting","text":"7.2.0 \u00b7 Feature flag \u00b7 Experimental When search highlighting is enabled and a user clicks on a search result, Material for MkDocs will highlight all occurrences after following the link. Add the following lines to mkdocs.yml : theme : features : - search.highlight Searching for code blocks highlights all occurrences of both terms.","title":"Search highlighting"},{"location":"setup/setting-up-site-search/#search-sharing","text":"7.2.0 \u00b7 Feature flag \u00b7 Experimental When search sharing is activated, a share button is rendered next to the reset button, which allows to deep link to the current search query and result. Add the following lines to mkdocs.yml : theme : features : - search.share When a user clicks the share button, the URL is automatically copied to the clipboard.","title":"Search sharing"},{"location":"setup/setting-up-site-search/#offline-search","text":"5.0.0 \u00b7 Plugin If you distribute your documentation as *.html files, the built-in search will not work out-of-the-box due to the restrictions modern browsers impose for security reasons. This can be mitigated with the localsearch plugin in combination with @squidfunk 's iframe-worker polyfill. For setup instructions, refer to the localsearch documentation . Tip When distributing documentation as HTML files to be opened from the file system, you will also want to set use_directory_urls: false in mkdocs.yml to make page links function correctly.","title":"Offline search"},{"location":"setup/setting-up-site-search/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-site-search/#search-boosting","text":"Insiders \u00b7 insiders-2.8.0 When Metadata is enabled, pages can be boosted in search with custom front matter, which will make them rank higher. Add the following lines at the top of a Markdown file: --- search: boost: 2 # (1)! --- # Document title ... When boosting pages, be gentle and start with low values .","title":"Search boosting"},{"location":"setup/setting-up-site-search/#search-exclusion","text":"Insiders \u00b7 insiders-3.1.0 \u00b7 Experimental When Metadata is enabled, pages can be excluded from search with custom front matter, removing them from the index. Add the following lines at the top of a Markdown file: --- search: exclude: true --- # Document title ...","title":"Search exclusion"},{"location":"setup/setting-up-site-search/#excluding-sections","text":"When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown heading: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"setup/setting-up-site-search/#excluding-blocks","text":"When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown inline- or block-level element: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" } ] }","title":"Excluding blocks"},{"location":"setup/setting-up-site-search/#customization","text":"The search implementation of Material for MkDocs is probably its most sophisticated feature, as it tries to balance a great typeahead experience, good performance, accessibility, and a result list that is easy to scan. This is where Material for MkDocs deviates from other themes. The following section explains how search can be customized to tailor it to your needs.","title":"Customization"},{"location":"setup/setting-up-site-search/#query-transformation","text":"When a user enters a query into the search box, the query is pre-processed before it is submitted to the search index. Material for MkDocs will apply the following transformations, which can be customized by extending the theme : export function defaultTransform ( query : string ) : string { return query . split ( /\"([^\"]+)\"/g ) /* (1)! */ . map (( terms , index ) => index & 1 ? terms . replace ( /^\\b|^(?![^\\x00-\\x7F]|$)|\\s+/g , \" +\" ) : terms ) . join ( \"\" ) . replace ( /\"|(?:^|\\s+)[*+\\-:^~]+(?=\\s+|$)/g , \"\" ) /* (2)! */ . trim () /* (3)! */ } Search for terms in quotation marks and prepend a + modifier to denote that the resulting document must contain all terms, converting the query to an AND query (as opposed to the default OR behavior). While users may expect terms enclosed in quotation marks to map to span queries, i.e. for which order is important, lunr doesn't support them, so the best we can do is to convert the terms to an AND query. Replace control characters which are not located at the beginning of the query or preceded by white space, or are not followed by a non-whitespace character or are at the end of the query string. Furthermore, filter unmatched quotation marks. Trim excess whitespace from left and right. If you want to switch to the default behavior of the mkdocs and readthedocs themes, both of which don't transform the query prior to submission, or customize the transform function, you can do this by overriding the config block : {% extends \"base.html\" %} {% block config %} {{ super() }} < script > var __search = { transform : function ( query ) { return query } } </ script > {% endblock %} The transform function will receive the query string as entered by the user and must return the processed query string to be submitted to the search index.","title":"Query transformation"},{"location":"setup/setting-up-site-search/#custom-search","text":"Material for MkDocs implements search as part of a web worker . If you want to switch the web worker with your own implementation, e.g. to submit search to an external service, you can add a custom JavaScript file to the docs directory and override the config block : {% block config %} {{ super() }} < script > var __search = { worker : \"<url>\" } </ script > {% endblock %} Communication with the search worker is implemented using a designated message format using discriminated unions, i.e. through the type property of the message. See the following interface definitions to learn about the message formats: SearchMessage SearchIndex and SearchResult The sequence and direction of messages is rather intuitive: SearchSetupMessage SearchReadyMessage SearchQueryMessage SearchResultMessage","title":"Custom search"},{"location":"setup/setting-up-social-cards/","text":"Setting up social cards \u00b6 Social cards, also known as social previews, are images that are displayed when a link to your project documentation is shared on social media. Material for MkDocs can generate beautiful social cards automatically, using the colors , fonts and logo 1 defined in mkdocs.yml , e.g.: The social preview image for the page on setting up site analytics . Twitter's Card validator shows how it will look when shared. Configuration \u00b6 Built-in social cards \u00b6 Insiders \u00b7 insiders-2.12.0 \u00b7 Plugin \u00b7 Experimental First, ensure you've installed all dependencies and have a valid site_url , as social preview images must be referenced via absolute URLs. Then, add the following lines to mkdocs.yml : plugins : - social The following configuration options are available: cards Default: true \u2013 This option specifies whether to generate social card images. If you want to switch the plugin off, e.g. for local builds, you can use an environment variable : plugins : - social : cards : !ENV [ SOCIAL_CARDS , false ] cards_color insiders-2.13.0 \u00b7 Default: theme.palette.primary \u2013 This option specifies the colors for the background fill and foreground text when generating the social card: plugins : - social : cards_color : fill : \"#0FF1CE\" # (1)! text : \"#FFFFFF\" Colors can either be defined as HEX colors, or as CSS color keywords . Note that HEX colors must be enclosed in quotes. cards_font insiders-4.3.0 \u00b7 Default: theme.font.text \u2013 This option specifies which font to use for rendering the social card, which can be any font hosted on Google Fonts : plugins : - social : cards_font : Roboto cards_directory Default: assets/images/social \u2013 This option specifies where the generated social card images will be written to. It's normally not necessary to change this option: plugins : - social : cards_directory : assets/images/social Dependencies \u00b6 Two Python packages are installed alongside Material for MkDocs to generate the social preview images, both of which are based on the Cairo Graphics library: Pillow \u2013 Python imaging library CairoSVG \u2013 Converter for *.svg files The Docker image for Insiders comes with all dependencies pre-installed. If you don't want to use Docker, see the following section which explains how to install all dependencies on your system: macOS Windows Linux Make sure Homebrew is installed, which is a modern package manager for macOS. Next, use the following command to install all necessary dependencies: brew install cairo freetype libffi libjpeg libpng zlib As stated in the installation guide , the easiest way to get up and running with the Cairo Graphics library on Windows is by installing GTK+ , since it has Cairo as a dependency. There are several package managers for Linux with varying availability per distribution. The installation guide explains how to install the Cairo Graphics library for your distribution: Ubuntu Fedora openSUSE apt-get install libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev yum install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel zypper install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel Caching recommended \u00b6 The built-in social cards plugin automatically fetches the fonts you define in mkdocs.yml from Google Fonts, and uses them to render the text that is displayed on the social card. The font files and generated cards are both written to the .cache directory, which is used in subsequent builds to detect whether the social cards need to be regenerated. You might want to: Ignore the .cache directory in your project, by adding it to .gitignore . When building your site for publishing, use a build cache to save the .cache directory in between builds. Taking the example from the publishing guide , add the following lines: name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - uses : actions/cache@v2 with : key : ${{ github.ref }} path : .cache - run : pip install mkdocs-material - run : mkdocs gh-deploy --force Meta tags \u00b6 The built-in social cards plugin automatically sets all necessary meta tags, equivalent to the following two customizations, which you can set manually when you don't want to use it: Open Graph Twitter Cards {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta property = \"og:type\" content = \"website\" /> < meta property = \"og:title\" content = \"{{ title }}\" /> < meta property = \"og:description\" content = \"{{ config.site_description }}\" /> < meta property = \"og:url\" content = \"{{ page.canonical_url }}\" /> < meta property = \"og:image\" content = \"<url>\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" /> {% endblock %} {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:title\" content = \"{{ title }}\" /> < meta name = \"twitter:description\" content = \"{{ config.site_description }}\" /> < meta name = \"twitter:image\" content = \"<url>\" /> {% endblock %} Usage \u00b6 If you want to adjust the title or set a custom description for the social card, you can use the Metadata extension, which takes precedence over the default values. Changing the title Changing the description Both types of logos, images ( theme.logo ) and icons ( theme.icon.logo ) are supported. While an image logo is used as-is, icons are filled with the color used in the header (white or black), which depends on the primary color. \u21a9","title":"Setting up social cards"},{"location":"setup/setting-up-social-cards/#setting-up-social-cards","text":"Social cards, also known as social previews, are images that are displayed when a link to your project documentation is shared on social media. Material for MkDocs can generate beautiful social cards automatically, using the colors , fonts and logo 1 defined in mkdocs.yml , e.g.: The social preview image for the page on setting up site analytics . Twitter's Card validator shows how it will look when shared.","title":"Setting up social cards"},{"location":"setup/setting-up-social-cards/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-social-cards/#built-in-social-cards","text":"Insiders \u00b7 insiders-2.12.0 \u00b7 Plugin \u00b7 Experimental First, ensure you've installed all dependencies and have a valid site_url , as social preview images must be referenced via absolute URLs. Then, add the following lines to mkdocs.yml : plugins : - social The following configuration options are available: cards Default: true \u2013 This option specifies whether to generate social card images. If you want to switch the plugin off, e.g. for local builds, you can use an environment variable : plugins : - social : cards : !ENV [ SOCIAL_CARDS , false ] cards_color insiders-2.13.0 \u00b7 Default: theme.palette.primary \u2013 This option specifies the colors for the background fill and foreground text when generating the social card: plugins : - social : cards_color : fill : \"#0FF1CE\" # (1)! text : \"#FFFFFF\" Colors can either be defined as HEX colors, or as CSS color keywords . Note that HEX colors must be enclosed in quotes. cards_font insiders-4.3.0 \u00b7 Default: theme.font.text \u2013 This option specifies which font to use for rendering the social card, which can be any font hosted on Google Fonts : plugins : - social : cards_font : Roboto cards_directory Default: assets/images/social \u2013 This option specifies where the generated social card images will be written to. It's normally not necessary to change this option: plugins : - social : cards_directory : assets/images/social","title":"Built-in social cards"},{"location":"setup/setting-up-social-cards/#dependencies","text":"Two Python packages are installed alongside Material for MkDocs to generate the social preview images, both of which are based on the Cairo Graphics library: Pillow \u2013 Python imaging library CairoSVG \u2013 Converter for *.svg files The Docker image for Insiders comes with all dependencies pre-installed. If you don't want to use Docker, see the following section which explains how to install all dependencies on your system: macOS Windows Linux Make sure Homebrew is installed, which is a modern package manager for macOS. Next, use the following command to install all necessary dependencies: brew install cairo freetype libffi libjpeg libpng zlib As stated in the installation guide , the easiest way to get up and running with the Cairo Graphics library on Windows is by installing GTK+ , since it has Cairo as a dependency. There are several package managers for Linux with varying availability per distribution. The installation guide explains how to install the Cairo Graphics library for your distribution: Ubuntu Fedora openSUSE apt-get install libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev yum install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel zypper install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel","title":"Dependencies"},{"location":"setup/setting-up-social-cards/#caching","text":"The built-in social cards plugin automatically fetches the fonts you define in mkdocs.yml from Google Fonts, and uses them to render the text that is displayed on the social card. The font files and generated cards are both written to the .cache directory, which is used in subsequent builds to detect whether the social cards need to be regenerated. You might want to: Ignore the .cache directory in your project, by adding it to .gitignore . When building your site for publishing, use a build cache to save the .cache directory in between builds. Taking the example from the publishing guide , add the following lines: name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - uses : actions/cache@v2 with : key : ${{ github.ref }} path : .cache - run : pip install mkdocs-material - run : mkdocs gh-deploy --force","title":"Caching"},{"location":"setup/setting-up-social-cards/#meta-tags","text":"The built-in social cards plugin automatically sets all necessary meta tags, equivalent to the following two customizations, which you can set manually when you don't want to use it: Open Graph Twitter Cards {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta property = \"og:type\" content = \"website\" /> < meta property = \"og:title\" content = \"{{ title }}\" /> < meta property = \"og:description\" content = \"{{ config.site_description }}\" /> < meta property = \"og:url\" content = \"{{ page.canonical_url }}\" /> < meta property = \"og:image\" content = \"<url>\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" /> {% endblock %} {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:title\" content = \"{{ title }}\" /> < meta name = \"twitter:description\" content = \"{{ config.site_description }}\" /> < meta name = \"twitter:image\" content = \"<url>\" /> {% endblock %}","title":"Meta tags"},{"location":"setup/setting-up-social-cards/#usage","text":"If you want to adjust the title or set a custom description for the social card, you can use the Metadata extension, which takes precedence over the default values. Changing the title Changing the description Both types of logos, images ( theme.logo ) and icons ( theme.icon.logo ) are supported. While an image logo is used as-is, icons are filled with the color used in the header (white or black), which depends on the primary color. \u21a9","title":"Usage"},{"location":"setup/setting-up-tags/","text":"Setting up tags \u00b6 Material for MkDocs adds first-class support for categorizing pages with tags, which adds the possibility to group related pages and make them discoverable via search and a dedicated tags index. If your documentation is large, tags can help to discover relevant information faster. Configuration \u00b6 Built-in tags \u00b6 Insiders \u00b7 insiders-2.7.0 \u00b7 Plugin \u00b7 Experimental The built-in tags plugin adds the ability to categorize any page with tags as part of the front matter of the page. In order to add support for tags, add the following lines to mkdocs.yml : plugins : - tags The following configuration options are available: tags_file Default: none \u2013 This option specifies which file should be used to render the tags index. See the section on adding a tags index for more information. If this option is specified, tags will become clickable, pointing to the corresponding section in the tags index: plugins : - tags : tags_file : tags.md The page holding the tags index can be linked anywhere in the nav section of mkdocs.yml . Note, however, that this options is not required. If this option is not specified, tags are still rendered and searchable, but without a tags index. Usage \u00b6 Adding tags \u00b6 When both, the built-in tags plugin and Metadata extension are enabled, tags can be added for a document with custom front matter. Add the following lines at the top of a Markdown file: --- tags: - insiders - brand new --- ... The page will now render with those tags above the main headline and within the search preview, which now allows to find pages by tags , as shown in the following screenshots: Tags Tag search Adding a tags index \u00b6 The built-in tags plugin allows to define a file to render a tags index , which can be any page that is part of the nav section. To add a tags index, create a page, e.g. tags.md : # Tags Following is a list of relevant tags: [TAGS] The [TAGS] marker specifies the position of the tags index, i.e. it is replaced with the actual tags index when the page is rendered. You can include arbitrary content before and after the marker: Hiding the tags \u00b6 While the tags are rendered above the main headline, sometimes, it might be desirable to hide them for a specific page, which can be achieved by using the Metadata extension: --- hide: - tags --- # Document title ...","title":"Setting up tags"},{"location":"setup/setting-up-tags/#setting-up-tags","text":"Material for MkDocs adds first-class support for categorizing pages with tags, which adds the possibility to group related pages and make them discoverable via search and a dedicated tags index. If your documentation is large, tags can help to discover relevant information faster.","title":"Setting up tags"},{"location":"setup/setting-up-tags/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-tags/#built-in-tags","text":"Insiders \u00b7 insiders-2.7.0 \u00b7 Plugin \u00b7 Experimental The built-in tags plugin adds the ability to categorize any page with tags as part of the front matter of the page. In order to add support for tags, add the following lines to mkdocs.yml : plugins : - tags The following configuration options are available: tags_file Default: none \u2013 This option specifies which file should be used to render the tags index. See the section on adding a tags index for more information. If this option is specified, tags will become clickable, pointing to the corresponding section in the tags index: plugins : - tags : tags_file : tags.md The page holding the tags index can be linked anywhere in the nav section of mkdocs.yml . Note, however, that this options is not required. If this option is not specified, tags are still rendered and searchable, but without a tags index.","title":"Built-in tags"},{"location":"setup/setting-up-tags/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-tags/#adding-tags","text":"When both, the built-in tags plugin and Metadata extension are enabled, tags can be added for a document with custom front matter. Add the following lines at the top of a Markdown file: --- tags: - insiders - brand new --- ... The page will now render with those tags above the main headline and within the search preview, which now allows to find pages by tags , as shown in the following screenshots: Tags Tag search","title":"Adding tags"},{"location":"setup/setting-up-tags/#adding-a-tags-index","text":"The built-in tags plugin allows to define a file to render a tags index , which can be any page that is part of the nav section. To add a tags index, create a page, e.g. tags.md : # Tags Following is a list of relevant tags: [TAGS] The [TAGS] marker specifies the position of the tags index, i.e. it is replaced with the actual tags index when the page is rendered. You can include arbitrary content before and after the marker:","title":"Adding a tags index"},{"location":"setup/setting-up-tags/#hiding-the-tags","text":"While the tags are rendered above the main headline, sometimes, it might be desirable to hide them for a specific page, which can be achieved by using the Metadata extension: --- hide: - tags --- # Document title ...","title":"Hiding the tags"},{"location":"setup/setting-up-the-footer/","text":"Setting up the footer \u00b6 The footer of your project documentation is a great place to add links to websites or platforms you or your company are using as additional marketing channels, e.g. , or , which can be configured via mkdocs.yml . Configuration \u00b6 Social links \u00b6 1.0.0 \u00b7 Default: none Social links are rendered next to the copyright notice as part of the footer of your project documentation. Add a list of social links in mkdocs.yml with: extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk The following properties must be set for each link: icon 5.0.0 \u00b7 Default: none \u00b7 Required \u2013 This property must contain a valid path to any icon bundled with the theme , or the build will not succeed. Some popular choices: \u2013 fontawesome/brands/behance \u2013 fontawesome/brands/docker \u2013 fontawesome/brands/github \u2013 fontawesome/brands/instagram \u2013 fontawesome/brands/linkedin \u2013 fontawesome/brands/medium \u2013 fontawesome/brands/pied-piper-alt \u2013 fontawesome/brands/product-hunt \u2013 fontawesome/brands/slack \u2013 fontawesome/brands/twitter link Default: none \u00b7 Required \u2013 This property must be set to a relative or absolute URL including the URI scheme. All URI schemes are supported, including mailto and bitcoin : Twitter Email extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk extra : social : - icon : fontawesome/solid/paper-plane link : mailto:<email-address> name 5.1.5 \u00b7 Default: domain name from link , if available \u2013 This property is used as the link's title attribute and can be set to a discernable name to improve accessibility: extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk name : squidfunk on Twitter Copyright notice \u00b6 0.1.0 \u00b7 Default: none A custom copyright banner can be rendered as part of the footer, which is displayed next to the social links. It can be defined as part of mkdocs.yml : copyright : Copyright &copy; 2016 - 2020 Martin Donath Generator notice \u00b6 7.3.0 \u00b7 Default: true The footer displays a Made with Material for MkDocs notice to denote how the site was generated. The notice can be removed with the following option via mkdocs.yml : extra : generator : false Please read this before removing the generator notice The subtle Made with Material for MkDocs hint in the footer is one of the reasons why this project is so popular, as it tells the user how the site is generated, helping new users to discover this project. Before removing please consider that you're enjoying the benefits of @squidfunk 's work for free, as this project is Open Source and has a permissive license. Thousands of hours went into this project, most of them without any financial return. Thus, if you remove this notice, please consider sponsoring the project. Thank you Customization \u00b6 Custom copyright \u00b6 8.0.0 \u00b7 Customization In order to customize and override the copyright notice , extend the theme and override the copyright block , which is normally set to the copyright property set in mkdocs.yml : {% extends \"base.html\" %} {% block copyright %} <!-- Add copyright here, including arbitrary HTML --> {% endblock %}","title":"Setting up the footer"},{"location":"setup/setting-up-the-footer/#setting-up-the-footer","text":"The footer of your project documentation is a great place to add links to websites or platforms you or your company are using as additional marketing channels, e.g. , or , which can be configured via mkdocs.yml .","title":"Setting up the footer"},{"location":"setup/setting-up-the-footer/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-the-footer/#social-links","text":"1.0.0 \u00b7 Default: none Social links are rendered next to the copyright notice as part of the footer of your project documentation. Add a list of social links in mkdocs.yml with: extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk The following properties must be set for each link: icon 5.0.0 \u00b7 Default: none \u00b7 Required \u2013 This property must contain a valid path to any icon bundled with the theme , or the build will not succeed. Some popular choices: \u2013 fontawesome/brands/behance \u2013 fontawesome/brands/docker \u2013 fontawesome/brands/github \u2013 fontawesome/brands/instagram \u2013 fontawesome/brands/linkedin \u2013 fontawesome/brands/medium \u2013 fontawesome/brands/pied-piper-alt \u2013 fontawesome/brands/product-hunt \u2013 fontawesome/brands/slack \u2013 fontawesome/brands/twitter link Default: none \u00b7 Required \u2013 This property must be set to a relative or absolute URL including the URI scheme. All URI schemes are supported, including mailto and bitcoin : Twitter Email extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk extra : social : - icon : fontawesome/solid/paper-plane link : mailto:<email-address> name 5.1.5 \u00b7 Default: domain name from link , if available \u2013 This property is used as the link's title attribute and can be set to a discernable name to improve accessibility: extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk name : squidfunk on Twitter","title":"Social links"},{"location":"setup/setting-up-the-footer/#copyright-notice","text":"0.1.0 \u00b7 Default: none A custom copyright banner can be rendered as part of the footer, which is displayed next to the social links. It can be defined as part of mkdocs.yml : copyright : Copyright &copy; 2016 - 2020 Martin Donath","title":"Copyright notice"},{"location":"setup/setting-up-the-footer/#generator-notice","text":"7.3.0 \u00b7 Default: true The footer displays a Made with Material for MkDocs notice to denote how the site was generated. The notice can be removed with the following option via mkdocs.yml : extra : generator : false Please read this before removing the generator notice The subtle Made with Material for MkDocs hint in the footer is one of the reasons why this project is so popular, as it tells the user how the site is generated, helping new users to discover this project. Before removing please consider that you're enjoying the benefits of @squidfunk 's work for free, as this project is Open Source and has a permissive license. Thousands of hours went into this project, most of them without any financial return. Thus, if you remove this notice, please consider sponsoring the project. Thank you","title":"Generator notice"},{"location":"setup/setting-up-the-footer/#customization","text":"","title":"Customization"},{"location":"setup/setting-up-the-footer/#custom-copyright","text":"8.0.0 \u00b7 Customization In order to customize and override the copyright notice , extend the theme and override the copyright block , which is normally set to the copyright property set in mkdocs.yml : {% extends \"base.html\" %} {% block copyright %} <!-- Add copyright here, including arbitrary HTML --> {% endblock %}","title":"Custom copyright"},{"location":"setup/setting-up-the-header/","text":"Setting up the header \u00b6 Material for MkDocs' header can be customized to show an announcement bar that disappears upon scrolling, and provides some options for further configuration. It also includes the search bar and a place to display your project's git repository , as explained in those dedicated guides. Configuration \u00b6 Automatic hiding \u00b6 6.2.0 \u00b7 Feature flag When autohiding is enabled, the header is automatically hidden when the user scrolls past a certain threshold, leaving more space for content. Add the following lines to mkdocs.yml : theme : features : - header.autohide Announcement bar \u00b6 5.0.0 \u00b7 Customization Material for MkDocs includes an announcement bar, which is the perfect place to display project news or other important information to the user. When the user scrolls past the header, the bar will automatically disappear. In order to add an announcement bar, extend the theme and override the announce block , which is empty by default: {% extends \"base.html\" %} {% block announce %} <!-- Add announcement here, including arbitrary HTML --> {% endblock %} Mark as read \u00b6 Insiders \u00b7 insiders-4.2.0 \u00b7 Feature flag \u00b7 Experimental In order to render temporary announcements that can be marked as read by the user, a button to dismiss the current announcement can be included. Add the following lines to mkdocs.yml : theme : features : - announce.dismiss When the user clicks the button, the current announcement is dismissed and not displayed again until the content of the announcement changes. This is handled automatically. Scroll to the top of this page to see it in action.","title":"Setting up the header"},{"location":"setup/setting-up-the-header/#setting-up-the-header","text":"Material for MkDocs' header can be customized to show an announcement bar that disappears upon scrolling, and provides some options for further configuration. It also includes the search bar and a place to display your project's git repository , as explained in those dedicated guides.","title":"Setting up the header"},{"location":"setup/setting-up-the-header/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-the-header/#automatic-hiding","text":"6.2.0 \u00b7 Feature flag When autohiding is enabled, the header is automatically hidden when the user scrolls past a certain threshold, leaving more space for content. Add the following lines to mkdocs.yml : theme : features : - header.autohide","title":"Automatic hiding"},{"location":"setup/setting-up-the-header/#announcement-bar","text":"5.0.0 \u00b7 Customization Material for MkDocs includes an announcement bar, which is the perfect place to display project news or other important information to the user. When the user scrolls past the header, the bar will automatically disappear. In order to add an announcement bar, extend the theme and override the announce block , which is empty by default: {% extends \"base.html\" %} {% block announce %} <!-- Add announcement here, including arbitrary HTML --> {% endblock %}","title":"Announcement bar"},{"location":"setup/setting-up-the-header/#mark-as-read","text":"Insiders \u00b7 insiders-4.2.0 \u00b7 Feature flag \u00b7 Experimental In order to render temporary announcements that can be marked as read by the user, a button to dismiss the current announcement can be included. Add the following lines to mkdocs.yml : theme : features : - announce.dismiss When the user clicks the button, the current announcement is dismissed and not displayed again until the content of the announcement changes. This is handled automatically. Scroll to the top of this page to see it in action.","title":"Mark as read"},{"location":"setup/setting-up-versioning/","text":"Setting up versioning \u00b6 Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike . When deploying a new version, older versions of your documentation remain untouched. Configuration \u00b6 Versioning \u00b6 7.0.0 \u00b7 Utility mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via mkdocs.yml : extra : version : provider : mike This renders a version selector in the header: Check out the versioning example to see it in action \u2013 squidfunk.github.io/mkdocs-material-example-versioning Why use mike? mike is built around the idea that once you've generated your docs for a particular version, you should never need to touch that version again. This means you never have to worry about breaking changes in MkDocs, since your old docs (built with an old version of MkDocs) are already generated and sitting in your gh-pages branch. While mike is flexible, it's optimized around putting your docs in a <major>.<minor> directory, with optional aliases (e.g. latest or dev ) to particularly notable versions. This makes it easy to make permalinks to whatever version of the documentation you want to direct people to. Version warning \u00b6 8.0.0 \u00b7 Customization If you're using versioning, you might want to display a warning when the user visits any other version than the latest version. Using theme extension , you can override the outdated block : {% extends \"base.html\" %} {% block outdated %} You're not viewing the latest version. < a href = \"{{ '../' ~ base_url }}\" > <!-- (1)! --> < strong > Click here to go to latest. </ strong > </ a > {% endblock %} Given this value for the href attribute, the link will always redirect to the root of your site, which will then redirect to the latest version. This ensures that older versions of your site do not depend on a specific alias, e.g. latest , to allow for changing the alias later on without breaking earlier versions. This will render a version warning above the header: The default version is identified by the latest alias. If you wish to set another alias as the latest version, e.g. stable , add the following lines to mkdocs.yml : extra : version : default : stable Make sure that this matches the default version . Stay on page \u00b6 Insiders \u00b7 insiders-2.6.0 Insiders improves the user experience when switching between versions: if version A and B contain a page with the same path name, the user will stay on the current page: New behavior Old behavior docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/foo/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/bar/ docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/ Usage \u00b6 While this section outlines the basic workflow for publishing new versions, it's best to check out mike's documentation to make yourself familar with its mechanics. Publishing a new version \u00b6 If you want to publish a new version of your project documentation, choose a version identifier and update the alias set as the default version with: mike deploy --push --update-aliases 0.1 latest Note that every version will be deployed as a subdirectory of your site_url , e.g.: docs.example.com/0.1/ docs.example.com/0.2/ ... Setting a default version \u00b6 When starting with mike , a good idea is to set an alias as a default version, e.g. latest , and when publishing a new version, always update the alias to point to the latest version: mike set-default --push latest When publishing a new version, mike will create a redirect in the root of your project documentation to the version associated with the alias: docs.example.com docs.example.com/0.1","title":"Setting up versioning"},{"location":"setup/setting-up-versioning/#setting-up-versioning","text":"Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike . When deploying a new version, older versions of your documentation remain untouched.","title":"Setting up versioning"},{"location":"setup/setting-up-versioning/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-versioning/#versioning","text":"7.0.0 \u00b7 Utility mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via mkdocs.yml : extra : version : provider : mike This renders a version selector in the header: Check out the versioning example to see it in action \u2013 squidfunk.github.io/mkdocs-material-example-versioning Why use mike? mike is built around the idea that once you've generated your docs for a particular version, you should never need to touch that version again. This means you never have to worry about breaking changes in MkDocs, since your old docs (built with an old version of MkDocs) are already generated and sitting in your gh-pages branch. While mike is flexible, it's optimized around putting your docs in a <major>.<minor> directory, with optional aliases (e.g. latest or dev ) to particularly notable versions. This makes it easy to make permalinks to whatever version of the documentation you want to direct people to.","title":"Versioning"},{"location":"setup/setting-up-versioning/#version-warning","text":"8.0.0 \u00b7 Customization If you're using versioning, you might want to display a warning when the user visits any other version than the latest version. Using theme extension , you can override the outdated block : {% extends \"base.html\" %} {% block outdated %} You're not viewing the latest version. < a href = \"{{ '../' ~ base_url }}\" > <!-- (1)! --> < strong > Click here to go to latest. </ strong > </ a > {% endblock %} Given this value for the href attribute, the link will always redirect to the root of your site, which will then redirect to the latest version. This ensures that older versions of your site do not depend on a specific alias, e.g. latest , to allow for changing the alias later on without breaking earlier versions. This will render a version warning above the header: The default version is identified by the latest alias. If you wish to set another alias as the latest version, e.g. stable , add the following lines to mkdocs.yml : extra : version : default : stable Make sure that this matches the default version .","title":"Version warning"},{"location":"setup/setting-up-versioning/#stay-on-page","text":"Insiders \u00b7 insiders-2.6.0 Insiders improves the user experience when switching between versions: if version A and B contain a page with the same path name, the user will stay on the current page: New behavior Old behavior docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/foo/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/bar/ docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/","title":"Stay on page"},{"location":"setup/setting-up-versioning/#usage","text":"While this section outlines the basic workflow for publishing new versions, it's best to check out mike's documentation to make yourself familar with its mechanics.","title":"Usage"},{"location":"setup/setting-up-versioning/#publishing-a-new-version","text":"If you want to publish a new version of your project documentation, choose a version identifier and update the alias set as the default version with: mike deploy --push --update-aliases 0.1 latest Note that every version will be deployed as a subdirectory of your site_url , e.g.: docs.example.com/0.1/ docs.example.com/0.2/ ...","title":"Publishing a new version"},{"location":"setup/setting-up-versioning/#setting-a-default-version","text":"When starting with mike , a good idea is to set an alias as a default version, e.g. latest , and when publishing a new version, always update the alias to point to the latest version: mike set-default --push latest When publishing a new version, mike will create a redirect in the root of your project documentation to the version associated with the alias: docs.example.com docs.example.com/0.1","title":"Setting a default version"},{"location":"setup/extensions/","text":"Extensions \u00b6 Markdown is a very small language with a kind-of reference implementation called John Gruber's Markdown . Python Markdown and Python Markdown Extensions are two packages that enhance the Markdown writing experience, adding useful syntax extensions for technical writing. Supported extensions \u00b6 The following extensions are all supported by Material for MkDocs and therefore strongly recommended. Click on each extension to learn about its purpose and configuration: Abbreviations Admonition Arithmatex Attribute Lists BetterEm Caret, Mark & Tilde Critic Definition Lists Details Emoji Footnotes Highlight Keys Metadata Markdown in HTML SmartSymbols Snippets SuperFences Tabbed Table of Contents Tables Tasklist Configuration \u00b6 Extensions are configured as part of mkdocs.yml \u2013 the MkDocs configuration file. The following sections contain two example configurations to bootstrap your documentation project. Minimal configuration \u00b6 This configuration is a good starting point for when you're using Material for MkDocs for the first time. The best idea is to explore the reference , and gradually add what you want to use: markdown_extensions : # Python Markdown - meta - toc : permalink : true # Python Markdown Extensions - pymdownx.highlight - pymdownx.superfences Recommended configuration \u00b6 This configuration enables all Markdown-related features of Material for MkDocs and is great for experienced users bootstrapping a new documentation project: markdown_extensions : # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - meta - md_in_html - toc : permalink : true # Python Markdown Extensions - pymdownx.arithmatex : generic : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed : alternate_style : true - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Extensions"},{"location":"setup/extensions/#extensions","text":"Markdown is a very small language with a kind-of reference implementation called John Gruber's Markdown . Python Markdown and Python Markdown Extensions are two packages that enhance the Markdown writing experience, adding useful syntax extensions for technical writing.","title":"Extensions"},{"location":"setup/extensions/#supported-extensions","text":"The following extensions are all supported by Material for MkDocs and therefore strongly recommended. Click on each extension to learn about its purpose and configuration: Abbreviations Admonition Arithmatex Attribute Lists BetterEm Caret, Mark & Tilde Critic Definition Lists Details Emoji Footnotes Highlight Keys Metadata Markdown in HTML SmartSymbols Snippets SuperFences Tabbed Table of Contents Tables Tasklist","title":"Supported extensions"},{"location":"setup/extensions/#configuration","text":"Extensions are configured as part of mkdocs.yml \u2013 the MkDocs configuration file. The following sections contain two example configurations to bootstrap your documentation project.","title":"Configuration"},{"location":"setup/extensions/#minimal-configuration","text":"This configuration is a good starting point for when you're using Material for MkDocs for the first time. The best idea is to explore the reference , and gradually add what you want to use: markdown_extensions : # Python Markdown - meta - toc : permalink : true # Python Markdown Extensions - pymdownx.highlight - pymdownx.superfences","title":"Minimal configuration"},{"location":"setup/extensions/#recommended-configuration","text":"This configuration enables all Markdown-related features of Material for MkDocs and is great for experienced users bootstrapping a new documentation project: markdown_extensions : # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - meta - md_in_html - toc : permalink : true # Python Markdown Extensions - pymdownx.arithmatex : generic : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed : alternate_style : true - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Recommended configuration"},{"location":"setup/extensions/python-markdown-extensions/","text":"Python Markdown Extensions \u00b6 The Python Markdown Extensions package is an excellent collection of additional extensions perfectly suited for advanced technical writing. Material for MkDocs lists this package as an explicit dependency, so it's automatically installed with a supported version. Supported extensions \u00b6 Arithmatex \u00b6 1.0.0 \u00b7 Extension The Arithmatex extension allows for rendering of block and inline block equations and integrates seamlessly with MathJax 1 \u2013 a library for mathematical typesetting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.arithmatex : generic : true Besides enabling the extension in mkdocs.yml , a MathJax configuration and the JavaScript runtime need to be included, which can be done with a few lines of additional JavaScript : docs/javascripts/mathjax.js mkdocs.yml window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using block syntax Using inline block syntax BetterEm \u00b6 0.1.0 \u00b7 Extension The BetterEm extension improves the detection of Markup to emphasize text in Markdown using special characters, i.e. for **bold** and _italic_ formatting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.betterem The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the BetterEm documentation for more information. Caret, Mark & Tilde \u00b6 1.0.0 \u00b7 Extension The Caret , Mark and Tilde extensions add the ability to highlight text and define sub- and superscript using a simple syntax. Enable them together via mkdocs.yml : markdown_extensions : - pymdownx.caret - pymdownx.mark - pymdownx.tilde The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Caret , Mark and Tilde documentation for guidance. See reference for usage: Highlighting text Sub- and superscripts Critic \u00b6 1.0.0 \u00b7 Extension The Critic extension allows for the usage of Critic Markup to highlight added, deleted or updated sections in a document, i.e. for tracking changes in Markdown syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.critic The following configuration options are supported: mode Default: view \u2013 This option defines how the markup should be parsed, i.e. whether to just view all suggested changes, or alternatively accept or reject them: View changes Accept changes Reject changes markdown_extensions : - pymdownx.critic : mode : view markdown_extensions : - pymdownx.critic : mode : accept markdown_extensions : - pymdownx.critic : mode : reject See reference for usage: Highlighting changes Details \u00b6 1.9.0 \u00b7 Extension The Details extension supercharges the Admonition extension, making the resulting call-outs collapsible, allowing them to be opened and closed by the user. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.details No configuration options are available. See reference for usage: Collapsible blocks Emoji \u00b6 1.0.0 \u00b7 Extension The Emoji extension automatically inlines bundled and custom icons and emojis in *.svg file format into the resulting HTML page. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji # (1)! emoji_generator : !!python/name:materialx.emoji.to_svg Python Markdown Extensions uses the pymdownx namespace, but in order to support the inlining of icons, the materialx namespace must be used, as it extends the functionality of pymdownx . The following configuration options are supported: emoji_index Default: emojione \u2013 This option defines which set of emojis is used for rendering. Note that the use of emojione is not recommended due to restrictions in licensing : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator Default: to_png \u2013 This option defines how the resolved emoji or icon shortcode is render. Note that icons can only be used together with the to_svg configuration: markdown_extensions : - pymdownx.emoji : emoji_generator : !!python/name:materialx.emoji.to_svg options.custom_icons Default: none \u2013 This option allows to list folders with additional icon sets to be used in Markdown or mkdocs.yml , which is explained in more detail in the icon customization guide : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using emojis Using icons Using icons in templates Highlight \u00b6 5.0.0 \u00b7 Extension \u00b7 Supersedes CodeHilite The Highlight extension adds support for syntax highlighting of code blocks (with the help of SuperFences ) and inline code blocks (with the help of InlineHilite ). Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.superfences # (1)! Highlight is used by the SuperFences extension to perform syntax highlighting on code blocks, not the other way round, which is why this extension also needs to be enabled. The following configuration options are supported: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time using Pygments or in the browser with a JavaScript syntax highlighter: Pygments JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : true - pymdownx.superfences markdown_extensions : - pymdownx.highlight : use_pygments : false As an example, Highlight.js , a JavaScript syntax highlighter, can be integrated with some additional JavaScript and additional CSS in mkdocs.yml : docs/javascripts/highlight.js mkdocs.yml document $ . subscribe (() => { hljs . highlightAll () }) extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/highlight.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. All following configuration options are only compatible with build-time syntax highlighting using Pygments , so they don't apply if use_pygments is set to false . auto_title Default: false \u2013 This option will automatically add a title to all code blocks that shows the name of the language being used, e.g. Python is printed for a py block: markdown_extensions : - pymdownx.highlight : auto_title : true linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers in the code block reference, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, two of which are supported by Material for MkDocs. While table wraps a code block in a <table> element, pymdownx-inline renders line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of either table or pymdownx-inline is recommended. anchor_linenums 8.1.0 \u00b7 Default: false \u2013 If a code blocks contains line numbers, enabling this setting will wrap them with anchor links, so they can be hyperlinked and shared more easily: markdown_extensions : - pymdownx.highlight : anchor_linenums : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using code blocks Adding a title Adding line numbers Highlighting specific lines Custom syntax theme InlineHilite \u00b6 5.0.0 \u00b7 Extension The InlineHilite extension add support for syntax highlighting of inline code blocks. It's built on top of the Highlight extension, from which it sources its configuration. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight - pymdownx.inlinehilite The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the css_class option, which must not be changed. See the InlineHilite documentation for guidance. See reference for usage: Highlighting inline code blocks Keys \u00b6 1.0.0 \u00b7 Extension The Keys extension adds a simple syntax to allow for the rendering of keyboard keys and combinations, e.g. Ctrl + Alt + Del . Enable it via mkdocs.yml : markdown_extensions : - pymdownx.keys The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the class option, which must not be changed. See the Keys documentation for more information. See reference for usage: Adding keyboard keys SmartSymbols \u00b6 0.1.0 \u00b7 Extension The SmartSymbols extension converts some sequences of characters into their corresponding symbols, e.h. copyright symbols or fractions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.smartsymbols The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the SmartSymbols documentation for guidance. Snippets \u00b6 0.1.0 \u00b7 Extension The Snippets extension adds the ability to embed content from arbitrary files into a document, including other documents or source files, by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.snippets The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Snippets documentation for more information. See reference for usage: Adding a glossary Embedding external files SuperFences \u00b6 0.1.0 \u00b7 Extension \u00b7 Supersedes Fenced Code Blocks The SuperFences extension allows for arbitrary nesting of code and content blocks inside each other, including admonitions, tabs, lists and all other elements. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.superfences The following configuration options are supported: custom_fences Default: none \u2013 This option allows to define a handler for custom fences, e.g. to preserve the definitions of Mermaid.js diagrams to be interpreted in the browser: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format Note that this will primarily prevent syntax highlighting from being applied. See the reference on diagrams to learn how Mermaid.js is integrated with Material for MkDocs. The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using flowcharts Using sequence diagrams Using state diagrams Using class diagrams Using entity-relationship diagrams Tabbed \u00b6 5.0.0 \u00b7 Extension The Tabbed extension allows the usage of content tabs, a simple way to group related content and code blocks under accessible tabs. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tabbed : alternate_style : true The following configuration options are supported: alternate_style 7.3.1 \u00b7 Default: false \u00b7 Required \u2013 This option enables the content tabs alternate style , which has better behavior on mobile viewports , and is the only supported style: markdown_extensions : - pymdownx.tabbed : alternate_style : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Grouping code blocks Grouping other content Embedded content Tasklist \u00b6 1.0.0 \u00b7 Extension The Tasklist extension allows for the usage of GitHub Flavored Markdown inspired task lists , following the same syntactical conventions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tasklist : custom_checkbox : true The following configuration options are supported: custom_checkbox Default: false \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons, and is therefore recommended: markdown_extensions : - pymdownx.tasklist : custom_checkbox : true clickable_checkbox Default: false \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this option is rather discouraged from a user experience perspective: markdown_extensions : - pymdownx.tasklist : clickable_checkbox : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using task lists Other libraries like KaTeX are also supported and can be integrated with some additional effort. See the Arithmatex documentation on KaTeX for further guidance, as this is beyond the scope of Material for MkDocs. \u21a9","title":"Python Markdown Extensions"},{"location":"setup/extensions/python-markdown-extensions/#python-markdown-extensions","text":"The Python Markdown Extensions package is an excellent collection of additional extensions perfectly suited for advanced technical writing. Material for MkDocs lists this package as an explicit dependency, so it's automatically installed with a supported version.","title":"Python Markdown Extensions"},{"location":"setup/extensions/python-markdown-extensions/#supported-extensions","text":"","title":"Supported extensions"},{"location":"setup/extensions/python-markdown-extensions/#arithmatex","text":"1.0.0 \u00b7 Extension The Arithmatex extension allows for rendering of block and inline block equations and integrates seamlessly with MathJax 1 \u2013 a library for mathematical typesetting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.arithmatex : generic : true Besides enabling the extension in mkdocs.yml , a MathJax configuration and the JavaScript runtime need to be included, which can be done with a few lines of additional JavaScript : docs/javascripts/mathjax.js mkdocs.yml window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using block syntax Using inline block syntax","title":"Arithmatex"},{"location":"setup/extensions/python-markdown-extensions/#betterem","text":"0.1.0 \u00b7 Extension The BetterEm extension improves the detection of Markup to emphasize text in Markdown using special characters, i.e. for **bold** and _italic_ formatting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.betterem The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the BetterEm documentation for more information.","title":"BetterEm"},{"location":"setup/extensions/python-markdown-extensions/#caret-mark-tilde","text":"1.0.0 \u00b7 Extension The Caret , Mark and Tilde extensions add the ability to highlight text and define sub- and superscript using a simple syntax. Enable them together via mkdocs.yml : markdown_extensions : - pymdownx.caret - pymdownx.mark - pymdownx.tilde The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Caret , Mark and Tilde documentation for guidance. See reference for usage: Highlighting text Sub- and superscripts","title":"Caret, Mark &amp; Tilde"},{"location":"setup/extensions/python-markdown-extensions/#critic","text":"1.0.0 \u00b7 Extension The Critic extension allows for the usage of Critic Markup to highlight added, deleted or updated sections in a document, i.e. for tracking changes in Markdown syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.critic The following configuration options are supported: mode Default: view \u2013 This option defines how the markup should be parsed, i.e. whether to just view all suggested changes, or alternatively accept or reject them: View changes Accept changes Reject changes markdown_extensions : - pymdownx.critic : mode : view markdown_extensions : - pymdownx.critic : mode : accept markdown_extensions : - pymdownx.critic : mode : reject See reference for usage: Highlighting changes","title":"Critic"},{"location":"setup/extensions/python-markdown-extensions/#details","text":"1.9.0 \u00b7 Extension The Details extension supercharges the Admonition extension, making the resulting call-outs collapsible, allowing them to be opened and closed by the user. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.details No configuration options are available. See reference for usage: Collapsible blocks","title":"Details"},{"location":"setup/extensions/python-markdown-extensions/#emoji","text":"1.0.0 \u00b7 Extension The Emoji extension automatically inlines bundled and custom icons and emojis in *.svg file format into the resulting HTML page. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji # (1)! emoji_generator : !!python/name:materialx.emoji.to_svg Python Markdown Extensions uses the pymdownx namespace, but in order to support the inlining of icons, the materialx namespace must be used, as it extends the functionality of pymdownx . The following configuration options are supported: emoji_index Default: emojione \u2013 This option defines which set of emojis is used for rendering. Note that the use of emojione is not recommended due to restrictions in licensing : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator Default: to_png \u2013 This option defines how the resolved emoji or icon shortcode is render. Note that icons can only be used together with the to_svg configuration: markdown_extensions : - pymdownx.emoji : emoji_generator : !!python/name:materialx.emoji.to_svg options.custom_icons Default: none \u2013 This option allows to list folders with additional icon sets to be used in Markdown or mkdocs.yml , which is explained in more detail in the icon customization guide : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using emojis Using icons Using icons in templates","title":"Emoji"},{"location":"setup/extensions/python-markdown-extensions/#highlight","text":"5.0.0 \u00b7 Extension \u00b7 Supersedes CodeHilite The Highlight extension adds support for syntax highlighting of code blocks (with the help of SuperFences ) and inline code blocks (with the help of InlineHilite ). Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.superfences # (1)! Highlight is used by the SuperFences extension to perform syntax highlighting on code blocks, not the other way round, which is why this extension also needs to be enabled. The following configuration options are supported: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time using Pygments or in the browser with a JavaScript syntax highlighter: Pygments JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : true - pymdownx.superfences markdown_extensions : - pymdownx.highlight : use_pygments : false As an example, Highlight.js , a JavaScript syntax highlighter, can be integrated with some additional JavaScript and additional CSS in mkdocs.yml : docs/javascripts/highlight.js mkdocs.yml document $ . subscribe (() => { hljs . highlightAll () }) extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/highlight.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. All following configuration options are only compatible with build-time syntax highlighting using Pygments , so they don't apply if use_pygments is set to false . auto_title Default: false \u2013 This option will automatically add a title to all code blocks that shows the name of the language being used, e.g. Python is printed for a py block: markdown_extensions : - pymdownx.highlight : auto_title : true linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers in the code block reference, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, two of which are supported by Material for MkDocs. While table wraps a code block in a <table> element, pymdownx-inline renders line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of either table or pymdownx-inline is recommended. anchor_linenums 8.1.0 \u00b7 Default: false \u2013 If a code blocks contains line numbers, enabling this setting will wrap them with anchor links, so they can be hyperlinked and shared more easily: markdown_extensions : - pymdownx.highlight : anchor_linenums : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using code blocks Adding a title Adding line numbers Highlighting specific lines Custom syntax theme","title":"Highlight"},{"location":"setup/extensions/python-markdown-extensions/#inlinehilite","text":"5.0.0 \u00b7 Extension The InlineHilite extension add support for syntax highlighting of inline code blocks. It's built on top of the Highlight extension, from which it sources its configuration. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight - pymdownx.inlinehilite The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the css_class option, which must not be changed. See the InlineHilite documentation for guidance. See reference for usage: Highlighting inline code blocks","title":"InlineHilite"},{"location":"setup/extensions/python-markdown-extensions/#keys","text":"1.0.0 \u00b7 Extension The Keys extension adds a simple syntax to allow for the rendering of keyboard keys and combinations, e.g. Ctrl + Alt + Del . Enable it via mkdocs.yml : markdown_extensions : - pymdownx.keys The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the class option, which must not be changed. See the Keys documentation for more information. See reference for usage: Adding keyboard keys","title":"Keys"},{"location":"setup/extensions/python-markdown-extensions/#smartsymbols","text":"0.1.0 \u00b7 Extension The SmartSymbols extension converts some sequences of characters into their corresponding symbols, e.h. copyright symbols or fractions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.smartsymbols The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the SmartSymbols documentation for guidance.","title":"SmartSymbols"},{"location":"setup/extensions/python-markdown-extensions/#snippets","text":"0.1.0 \u00b7 Extension The Snippets extension adds the ability to embed content from arbitrary files into a document, including other documents or source files, by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.snippets The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Snippets documentation for more information. See reference for usage: Adding a glossary Embedding external files","title":"Snippets"},{"location":"setup/extensions/python-markdown-extensions/#superfences","text":"0.1.0 \u00b7 Extension \u00b7 Supersedes Fenced Code Blocks The SuperFences extension allows for arbitrary nesting of code and content blocks inside each other, including admonitions, tabs, lists and all other elements. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.superfences The following configuration options are supported: custom_fences Default: none \u2013 This option allows to define a handler for custom fences, e.g. to preserve the definitions of Mermaid.js diagrams to be interpreted in the browser: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format Note that this will primarily prevent syntax highlighting from being applied. See the reference on diagrams to learn how Mermaid.js is integrated with Material for MkDocs. The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using flowcharts Using sequence diagrams Using state diagrams Using class diagrams Using entity-relationship diagrams","title":"SuperFences"},{"location":"setup/extensions/python-markdown-extensions/#tabbed","text":"5.0.0 \u00b7 Extension The Tabbed extension allows the usage of content tabs, a simple way to group related content and code blocks under accessible tabs. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tabbed : alternate_style : true The following configuration options are supported: alternate_style 7.3.1 \u00b7 Default: false \u00b7 Required \u2013 This option enables the content tabs alternate style , which has better behavior on mobile viewports , and is the only supported style: markdown_extensions : - pymdownx.tabbed : alternate_style : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Grouping code blocks Grouping other content Embedded content","title":"Tabbed"},{"location":"setup/extensions/python-markdown-extensions/#tasklist","text":"1.0.0 \u00b7 Extension The Tasklist extension allows for the usage of GitHub Flavored Markdown inspired task lists , following the same syntactical conventions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tasklist : custom_checkbox : true The following configuration options are supported: custom_checkbox Default: false \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons, and is therefore recommended: markdown_extensions : - pymdownx.tasklist : custom_checkbox : true clickable_checkbox Default: false \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this option is rather discouraged from a user experience perspective: markdown_extensions : - pymdownx.tasklist : clickable_checkbox : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using task lists Other libraries like KaTeX are also supported and can be integrated with some additional effort. See the Arithmatex documentation on KaTeX for further guidance, as this is beyond the scope of Material for MkDocs. \u21a9","title":"Tasklist"},{"location":"setup/extensions/python-markdown/","text":"Python Markdown \u00b6 Material for MkDocs supports a large number of Python Markdown extensions, which is part of what makes it so attractive for technical writing. Following is a list of all supported extensions, linking to the relevant sections of the reference for which features they need to be enabled. Supported extensions \u00b6 Abbreviations \u00b6 1.0.0 \u00b7 Extension The Abbreviations extension adds the ability to add a small tooltip to an element, by wrapping it with an abbr tag. Only plain text (no markup) is supported. Enable it via mkdocs.yml : markdown_extensions : - abbr No configuration options are available. See reference for usage: Adding abbreviations Adding a glossary Admonition \u00b6 0.1.0 \u00b7 Extension The Admonition extension adds support for admonitions, more commonly known as call-outs , which can be defined in Markdown by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - admonition No configuration options are available. See reference for usage: Adding admonitions Changing the title Removing the title Supported types Attribute Lists \u00b6 0.1.0 \u00b7 Extension The Attribute Lists extension allows to add HTML attributes and CSS classes to almost every Markdown inline- and block-level element with a special syntax. Enable it via mkdocs.yml : markdown_extensions : - attr_list No configuration options are available. See reference for usage: Adding buttons Adding icons with colors Image alignment Image lazy-loading Definition Lists \u00b6 1.1.0 \u00b7 Extension The Definition Lists extension adds the ability to add definition lists (more commonly known as description lists \u2013 dl in HTML) via Markdown to a document. Enable it via mkdocs.yml : markdown_extensions : - def_list No configuration options are available. See reference for usage: Using definition lists Footnotes \u00b6 1.0.0 \u00b7 Extension The Footnotes extension allows to define inline footnotes, which are then rendered below all Markdown content of a document. Enable it via mkdocs.yml : markdown_extensions : - footnotes No configuration options are supported. See reference for usage: Adding footnote references Adding footnote content Metadata \u00b6 1.0.0 \u00b7 Extension The Metadata extension adds the ability to attach arbitrary key-value pairs to a document via front matter written in YAML syntax before the Markdown. Enable it via mkdocs.yml : markdown_extensions : - meta No configuration options are available. See reference for usage: Setting the page title Setting the page description Adding tags Hiding the tags Hiding the sidebars Hiding the feedback widget Markdown in HTML \u00b6 0.1.0 \u00b7 Extension The Markdown in HTML extension allows for writing Markdown inside of HTML, which is useful for wrapping Markdown content with custom elements. Enable it via mkdocs.yml : markdown_extensions : - md_in_html By default, Markdown ignores any content within a raw HTML block-level element. With the md_in_html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. No configuration options are available. See reference for usage: Image captions Table of Contents \u00b6 0.1.0 \u00b7 Extension The Table of Contents extension automatically generates a table of contents from a document, which Material for MkDocs will render as part of the resulting page. Enable it via mkdocs.yml : markdown_extensions : - toc : permalink : true The following configuration options are supported: title 7.3.5 \u00b7 Default: automatically set \u2013 This option sets the title of the table of contents in the right navigation sidebar, which is normally automatically sourced from the translations for the site language as set in mkdocs.yml : markdown_extensions : - toc : title : On this page permalink Default: false \u2013 This option adds an anchor link containing the paragraph symbol \u00b6 or another custom symbol at the end of each headline, exactly like on the page you're currently viewing, which Material for MkDocs will make appear on hover: \u00b6 \u2693\ufe0e markdown_extensions : - toc : permalink : true markdown_extensions : - toc : permalink : \u2693\ufe0e permalink_title Default: Permanent link \u2013 This option sets the title of the anchor link which is shown on hover and read by screen readers. For accessibility reasons, it might be beneficial to change it to a more discernable name, stating that the anchor links to the section itself: markdown_extensions : - toc : permalink_title : Anchor link to this section for reference slugify Default: headerid.slugify \u2013 This option allows for customization of the slug function. For some languages, the default may not produce good and readable identifiers \u2013 consider using another slug function like for example those from Python Markdown Extensions : Unicode Unicode, case-sensitive markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify_cased toc_depth Default: 6 \u2013 Define the range of levels to be included in the table of contents. This may be useful for project documentation with deeply structured headings to decrease the length of the table of contents, or to remove the table of contents altogether: Hide levels 4-6 Hide table of contents markdown_extensions : - toc : toc_depth : 3 markdown_extensions : - toc : toc_depth : 0 The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Tables \u00b6 0.1.0 \u00b7 Extension The Tables extension adds the ability to create tables in Markdown by using a simple syntax. Enable it via mkdocs.yml (albeit it should be enabled by default): markdown_extensions : - tables No configuration options are available. See reference for usage: Using data tables Column alignment Superseded extensions \u00b6 The following Python Markdown extensions are not (or might not be) supported anymore, and are therefore not recommended for use. Instead, the alternatives should be considered. Fenced Code Blocks \u00b6 0.1.0 \u00b7 Extension Superseded by SuperFences . This extension might still work, but the SuperFences extension is superior in many ways, as it allows for arbitrary nesting, and is therefore recommended. CodeHilite \u00b6 0.1.0 ... 5.5.14 \u00b7 Extension Superseded by Highlight . Support for CodeHilite was dropped in 6.0.0, as Highlight has a better integration with other essential extensions like SuperFences and InlineHilite .","title":"Python Markdown"},{"location":"setup/extensions/python-markdown/#python-markdown","text":"Material for MkDocs supports a large number of Python Markdown extensions, which is part of what makes it so attractive for technical writing. Following is a list of all supported extensions, linking to the relevant sections of the reference for which features they need to be enabled.","title":"Python Markdown"},{"location":"setup/extensions/python-markdown/#supported-extensions","text":"","title":"Supported extensions"},{"location":"setup/extensions/python-markdown/#abbreviations","text":"1.0.0 \u00b7 Extension The Abbreviations extension adds the ability to add a small tooltip to an element, by wrapping it with an abbr tag. Only plain text (no markup) is supported. Enable it via mkdocs.yml : markdown_extensions : - abbr No configuration options are available. See reference for usage: Adding abbreviations Adding a glossary","title":"Abbreviations"},{"location":"setup/extensions/python-markdown/#admonition","text":"0.1.0 \u00b7 Extension The Admonition extension adds support for admonitions, more commonly known as call-outs , which can be defined in Markdown by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - admonition No configuration options are available. See reference for usage: Adding admonitions Changing the title Removing the title Supported types","title":"Admonition"},{"location":"setup/extensions/python-markdown/#attribute-lists","text":"0.1.0 \u00b7 Extension The Attribute Lists extension allows to add HTML attributes and CSS classes to almost every Markdown inline- and block-level element with a special syntax. Enable it via mkdocs.yml : markdown_extensions : - attr_list No configuration options are available. See reference for usage: Adding buttons Adding icons with colors Image alignment Image lazy-loading","title":"Attribute Lists"},{"location":"setup/extensions/python-markdown/#definition-lists","text":"1.1.0 \u00b7 Extension The Definition Lists extension adds the ability to add definition lists (more commonly known as description lists \u2013 dl in HTML) via Markdown to a document. Enable it via mkdocs.yml : markdown_extensions : - def_list No configuration options are available. See reference for usage: Using definition lists","title":"Definition Lists"},{"location":"setup/extensions/python-markdown/#footnotes","text":"1.0.0 \u00b7 Extension The Footnotes extension allows to define inline footnotes, which are then rendered below all Markdown content of a document. Enable it via mkdocs.yml : markdown_extensions : - footnotes No configuration options are supported. See reference for usage: Adding footnote references Adding footnote content","title":"Footnotes"},{"location":"setup/extensions/python-markdown/#metadata","text":"1.0.0 \u00b7 Extension The Metadata extension adds the ability to attach arbitrary key-value pairs to a document via front matter written in YAML syntax before the Markdown. Enable it via mkdocs.yml : markdown_extensions : - meta No configuration options are available. See reference for usage: Setting the page title Setting the page description Adding tags Hiding the tags Hiding the sidebars Hiding the feedback widget","title":"Metadata"},{"location":"setup/extensions/python-markdown/#markdown-in-html","text":"0.1.0 \u00b7 Extension The Markdown in HTML extension allows for writing Markdown inside of HTML, which is useful for wrapping Markdown content with custom elements. Enable it via mkdocs.yml : markdown_extensions : - md_in_html By default, Markdown ignores any content within a raw HTML block-level element. With the md_in_html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. No configuration options are available. See reference for usage: Image captions","title":"Markdown in HTML"},{"location":"setup/extensions/python-markdown/#table-of-contents","text":"0.1.0 \u00b7 Extension The Table of Contents extension automatically generates a table of contents from a document, which Material for MkDocs will render as part of the resulting page. Enable it via mkdocs.yml : markdown_extensions : - toc : permalink : true The following configuration options are supported: title 7.3.5 \u00b7 Default: automatically set \u2013 This option sets the title of the table of contents in the right navigation sidebar, which is normally automatically sourced from the translations for the site language as set in mkdocs.yml : markdown_extensions : - toc : title : On this page permalink Default: false \u2013 This option adds an anchor link containing the paragraph symbol \u00b6 or another custom symbol at the end of each headline, exactly like on the page you're currently viewing, which Material for MkDocs will make appear on hover: \u00b6 \u2693\ufe0e markdown_extensions : - toc : permalink : true markdown_extensions : - toc : permalink : \u2693\ufe0e permalink_title Default: Permanent link \u2013 This option sets the title of the anchor link which is shown on hover and read by screen readers. For accessibility reasons, it might be beneficial to change it to a more discernable name, stating that the anchor links to the section itself: markdown_extensions : - toc : permalink_title : Anchor link to this section for reference slugify Default: headerid.slugify \u2013 This option allows for customization of the slug function. For some languages, the default may not produce good and readable identifiers \u2013 consider using another slug function like for example those from Python Markdown Extensions : Unicode Unicode, case-sensitive markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify_cased toc_depth Default: 6 \u2013 Define the range of levels to be included in the table of contents. This may be useful for project documentation with deeply structured headings to decrease the length of the table of contents, or to remove the table of contents altogether: Hide levels 4-6 Hide table of contents markdown_extensions : - toc : toc_depth : 3 markdown_extensions : - toc : toc_depth : 0 The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Table of Contents"},{"location":"setup/extensions/python-markdown/#tables","text":"0.1.0 \u00b7 Extension The Tables extension adds the ability to create tables in Markdown by using a simple syntax. Enable it via mkdocs.yml (albeit it should be enabled by default): markdown_extensions : - tables No configuration options are available. See reference for usage: Using data tables Column alignment","title":"Tables"},{"location":"setup/extensions/python-markdown/#superseded-extensions","text":"The following Python Markdown extensions are not (or might not be) supported anymore, and are therefore not recommended for use. Instead, the alternatives should be considered.","title":"Superseded extensions"},{"location":"setup/extensions/python-markdown/#fenced-code-blocks","text":"0.1.0 \u00b7 Extension Superseded by SuperFences . This extension might still work, but the SuperFences extension is superior in many ways, as it allows for arbitrary nesting, and is therefore recommended.","title":"Fenced Code Blocks"},{"location":"setup/extensions/python-markdown/#codehilite","text":"0.1.0 ... 5.5.14 \u00b7 Extension Superseded by Highlight . Support for CodeHilite was dropped in 6.0.0, as Highlight has a better integration with other essential extensions like SuperFences and InlineHilite .","title":"CodeHilite"}]}